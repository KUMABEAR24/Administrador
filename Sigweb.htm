<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sigweb Pro v3.5 (ES) - Versión Unificada</title>
    <style>
        :root {
            --background-color: #1e1e1e;
            --surface-color: #2d2d2d;
            --primary-color: #0d6efd;
            --primary-hover-color: #0b5ed7;
            --secondary-color: #6c757d;
            --secondary-hover-color: #5c636a;
            --success-color: #198754;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --text-color: #e0e0e0;
            --text-muted-color: #a0a0a0;
            --border-color: #444;
            --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            --border-radius: 6px;
            --box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            --input-background: #3a3a3a;
        }

        body {
            font-family: var(--font-family);
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 20px;
            font-size: 14px;
        }

        #root {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }

        .area-container {
            background-color: var(--surface-color);
            border-radius: var(--border-radius);
            padding: 20px;
            box-shadow: var(--box-shadow);
            border: 1px solid var(--border-color);
        }

        h1, h2, h3 {
            color: var(--primary-color);
            margin-top: 0;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 10px;
        }
        
        h1 { font-size: 2em; }
        h2 { font-size: 1.5em; }
        h3 { font-size: 1.2em; }

        .data-input-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        textarea {
            width: 100%;
            height: 200px;
            background-color: var(--input-background);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            padding: 10px;
            box-sizing: border-box;
            resize: vertical;
        }
        textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 5px var(--primary-color);
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
            align-items: center;
        }

        button {
            padding: 10px 20px;
            border-radius: var(--border-radius);
            border: none;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.2s, transform 0.1s;
            font-size: 14px;
        }
        button:disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }
        button:active:not(:disabled) {
            transform: translateY(1px);
        }

        .btn-primary { background-color: var(--primary-color); color: white; }
        .btn-primary:hover:not(:disabled) { background-color: var(--primary-hover-color); }
        .btn-secondary { background-color: var(--secondary-color); color: white; }
        .btn-secondary:hover:not(:disabled) { background-color: var(--secondary-hover-color); }
        .btn-success { background-color: var(--success-color); color: white; }
        .btn-danger { background-color: var(--danger-color); color: white; }
        .btn-warning { background-color: var(--warning-color); color: #1e1e1e; }

        .btn-special {
            background: linear-gradient(45deg, #6a11cb 0%, #2575fc 100%);
            color: white;
        }

        .table-wrapper {
            overflow-x: auto;
            max-height: 500px;
            margin-top: 15px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 10px 12px;
            border: 1px solid var(--border-color);
            text-align: left;
            white-space: nowrap;
        }
        
        th {
            background-color: #3a3a3a;
            font-weight: bold;
            position: sticky;
            top: 0;
            z-index: 1;
        }
        
        tbody tr:nth-child(even) { background-color: #333; }
        tbody tr:hover { background-color: #4a4a4a; }
        
        input[type="text"], input[type="date"], input[type="search"], select {
            width: 100%;
            background-color: var(--input-background);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            padding: 8px;
            box-sizing: border-box;
        }
        
        input[type="checkbox"] {
            width: 18px;
            height: 18px;
            accent-color: var(--primary-color);
        }
        
        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            color: white;
            display: inline-block;
            text-align: center;
            min-width: 80px;
        }
        .status-PENDIENTE { background-color: #ffc107; color: #1e1e1e; }
        .status-GESTIONADO { background-color: #198754; }
        .status-DEVUELTO { background-color: #dc3545; }
        .status-REVISADO { background-color: #0dcaf0; color: #1e1e1e; }

        .filter-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .spinner-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            flex-direction: column;
            gap: 15px;
        }
        
        .spinner {
            border: 6px solid var(--surface-color);
            border-top: 6px solid var(--primary-color);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: var(--border-radius);
            color: white;
            z-index: 1001;
            box-shadow: 0 5px 15px rgba(0,0,0,0.4);
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        .notification.show {
            opacity: 1;
            transform: translateY(0);
        }
        .notification.success { background-color: var(--success-color); }
        .notification.error { background-color: var(--danger-color); }
        .notification.info { background-color: var(--primary-color); }
        
        .saving-indicator {
            font-size: 0.9em;
            color: var(--text-muted-color);
            margin-left: 15px;
            transition: opacity 0.3s;
        }
    </style>
</head>
<body>
    <div id="root"></div>
    <script type="module">
        import React, { useState, useEffect, useCallback, useMemo } from 'https://esm.sh/react@18.2.0';
        import ReactDOM from 'https://esm.sh/react-dom@18.2.0/client';

        // --- CONSTANTS ---
        const GOOGLE_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbwOa-d_aC7iY4A7V8u1pL_1J4_p9l2eXb3qP_tG9n-XyA7_Z0w5K9r-L8jA/exec';
        const REQUIRED_HEADERS_1 = ["No_Orden", "FECHA_NEGACION", "NO_CEDULA", "NOMBRE", "EPS", "PROGRAMA", "MOTIVO_NEGACION"];
        const REQUIRED_HEADERS_2 = ["No_Orden", "DESCRIPCION", "JUSTIFICACION", "FUNDAMENTO_LEGAL"];

        // --- SERVICES (API CALLS) ---
        const callGoogleScript = async (action, payload) => {
            const response = await fetch(GOOGLE_SCRIPT_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'text/plain;charset=utf-8' },
                body: JSON.stringify({ action, payload })
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Error en la comunicación con el servidor: ${errorText}`);
            }
            const result = await response.json();
            if (result.status === 'error') {
                throw new Error(result.message);
            }
            return result.data;
        };

        const fetchData = () => callGoogleScript('getData', {});
        const addCasesToCloud = (finalData) => callGoogleScript('addCases', { cases: finalData });
        const saveTrackingAndArchivedData = (trackingData, archivedData) => callGoogleScript('saveData', { trackingData, archivedData });

        // --- COMPONENTS ---

        const Spinner = ({ message = 'Cargando...' }) => {
            return React.createElement('div', { className: 'spinner-overlay' },
                React.createElement('div', { className: 'spinner' }),
                React.createElement('span', null, message)
            );
        };

        const Notification = ({ message, type, onDismiss }) => {
            useEffect(() => {
                if (message) {
                    const timer = setTimeout(onDismiss, 5000);
                    return () => clearTimeout(timer);
                }
            }, [message, onDismiss]);

            if (!message) return null;

            return React.createElement('div', { className: `notification ${type} show` }, message);
        };

        const DataInputArea = ({ setFinalData, showNotification }) => {
            const [rawInput1, setRawInput1] = useState('');
            const [rawInput2, setRawInput2] = useState('');

            const parsePastedData = (pastedText, requiredHeaders) => {
                try {
                    const rows = pastedText.trim().split('\n').map(row => row.split('\t'));
                    if (rows.length < 2) return [];
                    const headers = rows[0].map(h => h.trim());
                    
                    const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));
                    if(missingHeaders.length > 0) {
                        showNotification(`Faltan columnas: ${missingHeaders.join(', ')}`, 'error');
                        return [];
                    }

                    return rows.slice(1).map(row => {
                        const rowData = {};
                        headers.forEach((header, index) => {
                            rowData[header] = row[index] || '';
                        });
                        return rowData;
                    });
                } catch (error) {
                    showNotification(`Error al procesar datos: ${error.message}`, 'error');
                    return [];
                }
            };

            const handleCombineAndProcess = () => {
                if (!rawInput1 || !rawInput2) {
                    showNotification("Ambas áreas de datos deben contener información.", "warning");
                    return;
                }
                const parsedData1 = parsePastedData(rawInput1, REQUIRED_HEADERS_1);
                const parsedData2 = parsePastedData(rawInput2, REQUIRED_HEADERS_2);

                if (parsedData1.length === 0 || parsedData2.length === 0) {
                    showNotification("No se pudieron procesar los datos. Revisa el formato y las cabeceras.", "error");
                    return;
                }

                const data2Map = new Map(parsedData2.map(item => [item.No_Orden, item]));

                const combined = parsedData1.map(item1 => {
                    const item2 = data2Map.get(item1.No_Orden);
                    return {
                        ...item1,
                        DESCRIPCION: item2 ? item2.DESCRIPCION : '(pendiente)',
                        JUSTIFICACION: item2 ? item2.JUSTIFICACION : '(pendiente)',
                        FUNDAMENTO_LEGAL: item2 ? item2.FUNDAMENTO_LEGAL : '(pendiente)',
                        Tipo_de_Carta: '-- Seleccionar --',
                        Radicado: ''
                    };
                }).filter(item => item.No_Orden);

                setFinalData(prevFinalData => {
                    const existingOrderNumbers = new Set(prevFinalData.map(row => row.No_Orden));
                    const newUniqueCases = combined.filter(newCase => !existingOrderNumbers.has(newCase.No_Orden));
                    const addedCount = newUniqueCases.length;
                    const skippedCount = combined.length - addedCount;

                    if (addedCount > 0) {
                        showNotification(`Proceso completado. Agregados: ${addedCount}, Omitidos (duplicados): ${skippedCount}.`, 'success');
                    } else if (skippedCount > 0) {
                        showNotification(`No se agregaron casos nuevos. Se omitieron ${skippedCount} duplicados.`, 'info');
                    } else {
                        showNotification("No se encontraron casos válidos para agregar.", 'warning');
                    }

                    setRawInput1('');
                    setRawInput2('');
                    return [...prevFinalData, ...newUniqueCases];
                });
            };

            return React.createElement('div', { className: 'area-container' },
                React.createElement('h2', null, 'Área 1: Ingreso de Datos'),
                React.createElement('div', { className: 'data-input-grid' },
                    React.createElement('div', null,
                        React.createElement('h3', null, 'Datos Principales'),
                        React.createElement('textarea', {
                            placeholder: 'Pega aquí los datos principales (incluyendo cabeceras)...',
                            value: rawInput1,
                            onChange: e => setRawInput1(e.target.value)
                        })
                    ),
                    React.createElement('div', null,
                        React.createElement('h3', null, 'Datos Complementarios'),
                        React.createElement('textarea', {
                            placeholder: 'Pega aquí los datos complementarios (incluyendo cabeceras)...',
                            value: rawInput2,
                            onChange: e => setRawInput2(e.target.value)
                        })
                    )
                ),
                React.createElement('div', { className: 'button-group' },
                    React.createElement('button', {
                        className: 'btn-special',
                        onClick: handleCombineAndProcess,
                        disabled: !rawInput1 || !rawInput2
                    }, 'Combinar y Procesar Datos')
                )
            );
        };
        
        const ReviewArea = ({
            filteredFinalData, selectedRows, setSelectedRows, reviewSearchTerm, 
            setReviewSearchTerm, handleFinalDataChange, addCasesToCloud, 
            handleSendToTracking, finalDataCount
        }) => {
            const handleSelectAll = (e) => {
                if (e.target.checked) {
                    const allIds = new Set(filteredFinalData.map(row => row.No_Orden));
                    setSelectedRows(allIds);
                } else {
                    setSelectedRows(new Set());
                }
            };
            
            const handleSelectRow = (noOrden) => {
                const newSelection = new Set(selectedRows);
                if (newSelection.has(noOrden)) {
                    newSelection.delete(noOrden);
                } else {
                    newSelection.add(noOrden);
                }
                setSelectedRows(newSelection);
            };

            return React.createElement('div', { className: 'area-container' },
                React.createElement('h2', null, `Área 2: Revisión Final (${finalDataCount} casos)`),
                React.createElement('div', { className: 'filter-controls' },
                    React.createElement('input', {
                        type: 'search',
                        placeholder: 'Buscar en tabla de revisión...',
                        value: reviewSearchTerm,
                        onChange: e => setReviewSearchTerm(e.target.value),
                        style: { flexGrow: 1 }
                    })
                ),
                React.createElement('div', { className: 'table-wrapper' },
                    React.createElement('table', null,
                        React.createElement('thead', null, React.createElement('tr', null,
                            React.createElement('th', null, React.createElement('input', { type: 'checkbox', onChange: handleSelectAll, checked: selectedRows.size === filteredFinalData.length && filteredFinalData.length > 0 })),
                            ['No_Orden', 'FECHA_NEGACION', 'NO_CEDULA', 'NOMBRE', 'EPS', 'PROGRAMA', 'MOTIVO_NEGACION', 'DESCRIPCION', 'JUSTIFICACION', 'FUNDAMENTO_LEGAL', 'Tipo_de_Carta', 'Radicado']
                            .map(header => React.createElement('th', { key: header }, header.replace(/_/g, ' ')))
                        )),
                        React.createElement('tbody', null,
                            filteredFinalData.map(row => React.createElement('tr', { key: row.No_Orden },
                                React.createElement('td', null, React.createElement('input', { type: 'checkbox', checked: selectedRows.has(row.No_Orden), onChange: () => handleSelectRow(row.No_Orden) })),
                                React.createElement('td', {key: 'No_Orden'}, row.No_Orden),
                                React.createElement('td', {key: 'FECHA_NEGACION'}, row.FECHA_NEGACION),
                                React.createElement('td', {key: 'NO_CEDULA'}, row.NO_CEDULA),
                                React.createElement('td', {key: 'NOMBRE'}, row.NOMBRE),
                                React.createElement('td', {key: 'EPS'}, row.EPS),
                                React.createElement('td', {key: 'PROGRAMA'}, row.PROGRAMA),
                                React.createElement('td', {key: 'MOTIVO_NEGACION'}, row.MOTIVO_NEGACION),
                                React.createElement('td', {key: 'DESCRIPCION'}, row.DESCRIPCION),
                                React.createElement('td', {key: 'JUSTIFICACION'}, row.JUSTIFICACION),
                                React.createElement('td', {key: 'FUNDAMENTO_LEGAL'}, row.FUNDAMENTO_LEGAL),
                                React.createElement('td', { key: 'Tipo_de_Carta' }, React.createElement('select', { value: row.Tipo_de_Carta, onChange: e => handleFinalDataChange(row.No_Orden, 'Tipo_de_Carta', e.target.value) },
                                    React.createElement('option', { value: '-- Seleccionar --' }, '-- Seleccionar --'),
                                    React.createElement('option', { value: 'NEGACION' }, 'NEGACION'),
                                    React.createElement('option', { value: 'COMPLEMENTARIEDAD' }, 'COMPLEMENTARIEDAD')
                                )),
                                React.createElement('td', { key: 'Radicado' }, React.createElement('input', { type: 'text', value: row.Radicado, onChange: e => handleFinalDataChange(row.No_Orden, 'Radicado', e.target.value) }))
                            ))
                        )
                    )
                ),
                React.createElement('div', { className: 'button-group' },
                    React.createElement('button', { className: 'btn-success', onClick: handleSendToTracking, disabled: selectedRows.size === 0 }, `Enviar a Seguimiento (${selectedRows.size})`),
                    React.createElement('button', { className: 'btn-primary', onClick: addCasesToCloud, disabled: finalDataCount === 0 }, 'Agregar Casos a la Nube')
                )
            );
        };

        const TrackingArea = ({
            isSaving, filteredTrackingData, trackingSearchTerm, setTrackingSearchTerm, 
            handleTrackingDataChange, handleArchiveCase
        }) => {
            return React.createElement('div', { className: 'area-container' },
                React.createElement('h2', null, 'Área 3: Seguimiento'),
                 React.createElement('div', { className: 'filter-controls' },
                    React.createElement('input', {
                        type: 'search',
                        placeholder: 'Buscar en tabla de seguimiento...',
                        value: trackingSearchTerm,
                        onChange: e => setTrackingSearchTerm(e.target.value),
                        style: { flexGrow: 1 }
                    }),
                    React.createElement('span', { className: 'saving-indicator', style: { opacity: isSaving ? 1 : 0 } }, 'Guardando en la nube...')
                ),
                React.createElement('div', { className: 'table-wrapper' },
                    React.createElement('table', null,
                        React.createElement('thead', null, React.createElement('tr', null,
                             ['Estado', 'Nota', 'No_Orden', 'FECHA_NEGACION', 'NOMBRE', 'EPS', 'PROGRAMA', 'MOTIVO_NEGACION', 'Tipo_de_Carta', 'Radicado', 'Fecha_a_Seguimiento', 'Acción']
                            .map(header => React.createElement('th', { key: header }, header.replace(/_/g, ' ')))
                        )),
                        React.createElement('tbody', null, 
                            filteredTrackingData.map(row => React.createElement('tr', { key: row.No_Orden },
                                React.createElement('td', null, React.createElement('select', { value: row.Estado, onChange: e => handleTrackingDataChange(row.No_Orden, 'Estado', e.target.value) },
                                    ['PENDIENTE', 'GESTIONADO', 'DEVUELTO', 'REVISADO'].map(status => React.createElement('option', { key: status, value: status }, status))
                                )),
                                React.createElement('td', null, React.createElement('input', { type: 'text', value: row.Nota || '', onChange: e => handleTrackingDataChange(row.No_Orden, 'Nota', e.target.value) })),
                                ['No_Orden', 'FECHA_NEGACION', 'NOMBRE', 'EPS', 'PROGRAMA', 'MOTIVO_NEGACION', 'Tipo_de_Carta', 'Radicado', 'Fecha_a_Seguimiento'].map(key => React.createElement('td', { key }, row[key])),
                                React.createElement('td', null, React.createElement('button', { className: 'btn-secondary', onClick: () => handleArchiveCase(row.No_Orden) }, 'Archivar'))
                            ))
                        )
                    )
                )
            );
        };

        // --- MAIN APP COMPONENT ---
        const App = () => {
            const [finalData, setFinalData] = useState([]);
            const [trackingData, setTrackingData] = useState([]);
            const [archivedData, setArchivedData] = useState([]);
            const [isLoading, setIsLoading] = useState(true);
            const [isSaving, setIsSaving] = useState(false);
            const [notification, setNotification] = useState({ message: '', type: 'info' });
            const [reviewSearchTerm, setReviewSearchTerm] = useState('');
            const [trackingSearchTerm, setTrackingSearchTerm] = useState('');
            const [selectedRows, setSelectedRows] = useState(new Set());

            const showNotification = (message, type = 'info') => {
                setNotification({ message, type });
            };

            const dismissNotification = () => {
                setNotification({ message: '', type: 'info' });
            };
            
            const filteredFinalData = useMemo(() => {
                if (!reviewSearchTerm) return finalData;
                const lowercasedFilter = reviewSearchTerm.toLowerCase();
                return finalData.filter(row =>
                    Object.values(row).some(value =>
                        String(value).toLowerCase().includes(lowercasedFilter)
                    )
                );
            }, [finalData, reviewSearchTerm]);

            const filteredTrackingData = useMemo(() => {
                if (!trackingSearchTerm) return trackingData;
                const lowercasedFilter = trackingSearchTerm.toLowerCase();
                return trackingData.filter(row =>
                    Object.values(row).some(value =>
                        String(value).toLowerCase().includes(lowercasedFilter)
                    )
                );
            }, [trackingData, trackingSearchTerm]);

            const handleFetchData = async () => {
                setIsLoading(true);
                try {
                    const data = await fetchData();
                    setFinalData(data.finalData || []);
                    setTrackingData(data.trackingData || []);
                    setArchivedData(data.archivedData || []);
                    showNotification("Datos cargados correctamente desde la nube.", "success");
                } catch (error) {
                    showNotification(`Error al cargar datos: ${error.message}`, 'error');
                } finally {
                    setIsLoading(false);
                }
            };
            
            const handleAddCasesToCloud = async () => {
                if (finalData.length === 0) {
                    showNotification("No hay casos en la tabla de revisión para agregar.", 'warning');
                    return;
                }
                setIsLoading(true);
                try {
                    const result = await addCasesToCloud(finalData);
                    showNotification(result.message, 'success');
                    setFinalData([]);
                    setSelectedRows(new Set());
                } catch (error) {
                    showNotification(`Error al guardar en la nube: ${error.message}`, 'error');
                } finally {
                    setIsLoading(false);
                }
            };

            const handleSaveTrackingAndArchived = useCallback(async (currentTrackingData, currentArchivedData) => {
                setIsSaving(true);
                try {
                    await saveTrackingAndArchivedData(currentTrackingData, currentArchivedData);
                } catch (error) {
                    showNotification(`Error de guardado automático: ${error.message}`, 'error');
                } finally {
                    setIsSaving(false);
                }
            }, []);

            useEffect(() => {
                handleFetchData();
            }, []);
            
            useEffect(() => {
                if (isLoading) return; // Don't save on initial load
                const handler = setTimeout(() => {
                     handleSaveTrackingAndArchived(trackingData, archivedData);
                }, 1500); // Debounce saving
                return () => clearTimeout(handler);
            }, [trackingData, archivedData, isLoading, handleSaveTrackingAndArchived]);
            
            const handleFinalDataChange = (noOrden, field, value) => {
                setFinalData(currentData =>
                    currentData.map(row =>
                        row.No_Orden === noOrden ? { ...row, [field]: value } : row
                    )
                );
            };
            
            const handleTrackingDataChange = (noOrden, field, value) => {
                setTrackingData(currentData =>
                    currentData.map(row =>
                        row.No_Orden === noOrden ? { ...row, [field]: value } : row
                    )
                );
            };

            const handleArchiveCase = (noOrden) => {
                const caseToArchive = trackingData.find(row => row.No_Orden === noOrden);
                if (!caseToArchive) return;
                
                const updatedCase = { ...caseToArchive, Fecha_Archivado: new Date().toISOString().split('T')[0] };
                
                setArchivedData(prev => [...prev, updatedCase]);
                setTrackingData(prev => prev.filter(row => row.No_Orden !== noOrden));
                showNotification(`Caso ${noOrden} archivado.`, 'info');
            };

            const handleSendToTracking = () => {
                if (selectedRows.size === 0) {
                    showNotification("No hay casos seleccionados para enviar a seguimiento.", "warning");
                    return;
                }
                const casesToSend = finalData.filter(row => selectedRows.has(row.No_Orden));
                const invalidCases = casesToSend.filter(c => c.Tipo_de_Carta === 'COMPLEMENTARIEDAD' && !c.Radicado);
                if (invalidCases.length > 0) {
                    const orderNumbers = invalidCases.map(c => c.No_Orden).join(', ');
                    showNotification(`Error: Los casos ${orderNumbers} requieren 'Radicado' para carta de complementariedad.`, 'error');
                    return;
                }
                const casesToKeep = finalData.filter(row => !selectedRows.has(row.No_Orden));
                const newTrackingCases = casesToSend.map(c => ({...c, Estado: 'PENDIENTE', Fecha_a_Seguimiento: new Date().toISOString().split('T')[0], Nota: '' }));
                setTrackingData(prev => [...prev, ...newTrackingCases]);
                setFinalData(casesToKeep);
                setSelectedRows(new Set());
                showNotification(`${casesToSend.length} caso(s) enviados a seguimiento.`, 'success');
            };

            if (isLoading && !finalData.length && !trackingData.length) {
                return React.createElement(Spinner, { message: "Cargando datos iniciales desde la nube..." });
            }

            return React.createElement('div', { id: 'app-container' },
                React.createElement('h1', null, 'Sigweb Pro v3.5 (ES)'),
                React.createElement(DataInputArea, { setFinalData, showNotification }),
                React.createElement(ReviewArea, {
                    filteredFinalData,
                    selectedRows,
                    setSelectedRows,
                    reviewSearchTerm,
                    setReviewSearchTerm,
                    handleFinalDataChange,
                    addCasesToCloud: handleAddCasesToCloud,
                    handleSendToTracking,
                    finalDataCount: finalData.length,
                }),
                React.createElement(TrackingArea, {
                    isSaving,
                    filteredTrackingData,
                    trackingSearchTerm,
                    setTrackingSearchTerm,
                    handleTrackingDataChange,
                    handleArchiveCase
                }),
                React.createElement(Notification, { message: notification.message, type: notification.type, onDismiss: dismissNotification }),
                (isLoading && (finalData.length > 0 || trackingData.length > 0)) && React.createElement(Spinner, { message: "Sincronizando con la nube..." })
            );
        };

        // --- RENDER APP ---
        const rootElement = document.getElementById('root');
        if (rootElement) {
            const root = ReactDOM.createRoot(rootElement);
            root.render(React.createElement(App));
        } else {
            console.error('Failed to find the root element');
        }
    </script>
</body>
</html>
