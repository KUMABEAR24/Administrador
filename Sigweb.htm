<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sigweb Pro v3.5</title>
    <!-- Tailwind CSS JIT CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- SheetJS for Excel Exports -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <!-- Babel Standalone for in-browser JSX transpilation -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <script>
      // Tailwind CSS Configuration
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              'primary': '#4e9fef',
              'background': '#1e1e1e',
              'surface': '#2d2d2d',
              'text-primary': '#d4d4d4',
              'text-secondary': '#a0a0a0',
              'border-color': '#444',
              'header': '#3a3a3a',
              'highlight': '#252526',
              'warning': '#6e550c',
              'archive': '#3a3a3a',
              'success': '#28a745',
              'danger': '#a02d2d',
              'danger-hover': '#c0392b',
              'btn-primary': '#0e639c',
              'btn-primary-hover': '#1a73e8',
            },
            animation: {
              'flash-success': 'flash-success 1s ease-out',
            },
            keyframes: {
              'flash-success': {
                'from': { backgroundColor: '#28a745' },
                'to': { backgroundColor: 'transparent' },
              }
            }
          }
        }
      }
    </script>
    
    <!-- ES Module Import Map for React -->
    <script type="importmap">
    {
      "imports": {
        "react": "https://esm.sh/react@18.2.0",
        "react-dom/client": "https://esm.sh/react-dom@18.2.0/client"
      }
    }
    </script>
</head>
<body class="bg-background text-text-primary">
    <div id="root"></div>

    <!-- 
      ============================================
      ENTIRE REACT APPLICATION BUNDLED BELOW
      ============================================
    -->
    <script type="text/babel" data-presets="react" data-type="module">
        import React, { useState, useEffect, useCallback, useMemo } from 'react';
        import ReactDOM from 'react-dom/client';

        // =================================================================================
        // INLINED: constants.ts
        // =================================================================================
        const PORTAL_HEADERS = [
          "Fecha_Neg", "Sucursal", "No_Orden", "No_Cedula", "Nombre", 
          "Motivo_Negacion", "Auditor", "Programa", "Plan", "Antiguedad", 
          "EPS", "Telefono", "Celular", "Direccion", "Email", 
          "Edad", "Tipo_Usuario", "Usuario_Emitio", "Regional", "Gestion_Negacion"
        ];

        const PDF_HEADERS = [
          "Archivo (No. Orden)", "Descripción", "Justificación", "Fundamento Legal", "Código"
        ];

        const TRACKING_STATUSES = ['Pendiente', 'En Gestión', 'Finalizado'];

        const defaultTemplates = [
            { id: 'tpl_neg_gen', name: 'Negación General', body: `Apreciado usuario; {{Nombre}},\n\nAgradecemos la confianza depositada en Coomeva Medicina Prepagada, con relación a su solicitud acerca del servicio {{Motivo_Negacion}} que en esta oportunidad no está aprobado debido a que corresponde a EXCLUSIÓN ({{Descripcion_PDF}}), ({{Justificacion_PDF}}), ({{Fundamento_Legal_PDF}}).\n\nEl servicio negado anteriormente; debe tramitarlo a través su EPS asignada. Adjuntamos soporte de la carta de negación.` },
            { id: 'tpl_comp_rc', name: 'Comp. Red Coincidente', body: `Apreciado Usuario; {{Nombre}},\n\nAgradecemos la confianza depositada en Coomeva Medicina Prepagada, con relación a su solicitud acerca del servicio ({{Descripcion_PDF}}) que no fue aprobado, debido a que ({{Justificacion_PDF}}), ({{Fundamento_Legal_PDF}}).\n\nSin embargo, está en gestión a través de su EPS ({{EPS}}) con el número de radicado ({{Radicado_Comp}}), puede realizar seguimiento mediante la oficina virtual de la EPS ({{Oficina_Virtual_EPS}}).` },
            { id: 'tpl_3', name: 'Negación Tutela', body: 'Apreciado usuario; {{Nombre}},\n\nCon relación a su solicitud mediante acción de tutela, informamos que el servicio {{Motivo_Negacion}} no puede ser aprobado debido a ({{Justificacion_PDF}}).\n\nLe recomendamos seguir el conducto regular a través de su EPS. Caso: {{No_Orden}}' },
            { id: 'tpl_4', name: 'Informativa Cita', body: 'Apreciado usuario; {{Nombre}},\n\nLe informamos que su cita para {{Motivo_Negacion}} ha sido programada exitosamente. Por favor, preséntese en {{Direccion}} el día {{Fecha_Neg}}.\n\nGracias por su confianza.' },
            { id: 'tpl_5', name: 'Recordatorio General', body: 'Estimado(a) {{Nombre}},\n\nEste es un recordatorio sobre su caso con número de orden {{No_Orden}} relacionado con {{Motivo_Negacion}}. Nuestro equipo está trabajando en ello.\n\nNos comunicaremos pronto.' },
        ];


        // =================================================================================
        // INLINED: services/utilityService.ts
        // =================================================================================
        const capitalizeWords = (str) => {
          if (!str) return '';
          return str.toLowerCase().replace(/\b\w/g, char => char.toUpperCase());
        };

        const processPastedData = (pastedText, headers) => {
          return pastedText
            .trim()
            .split(/\r?\n/)
            .map(rowText => {
              const cells = rowText.split('\t');
              const rowObject = {};
              headers.forEach((header, index) => {
                if (cells[index]) {
                  rowObject[header] = cells[index].trim();
                }
              });
              return rowObject;
            });
        };

        const replacePlaceholders = (templateBody, data) => {
          const getOficinaVirtual = (eps) => {
            const e = (eps || "").toUpperCase();
            if (e.includes("NUEVA EPS")) return `<a href='https://portal.nuevaeps.com.co/Portal/home.jspx' target='_blank' rel='noopener noreferrer'>NUEVA EPS</a>`;
            if (e.includes("SALUD TOTAL")) return `<a href='https://saludtotal.com.co/' target='_blank' rel='noopener noreferrer'>SALUD TOTAL</a>`;
            return eps;
          };

          const fullData = { ...data, Oficina_Virtual_EPS: getOficinaVirtual(data.EPS) };

          return templateBody.replace(/\{\{(\w+)\}\}/g, (match, key) => {
            return fullData[key] || match;
          });
        };

        const exportDetailedReport = (finalData, trackingData, archivedData) => {
          try {
            const masterDataMap = new Map();

            [...finalData, ...trackingData, ...archivedData].forEach(row => {
              if (row.No_Orden) {
                const key = row.No_Orden.trim();
                const existing = masterDataMap.get(key) || {};
                masterDataMap.set(key, { ...existing, ...row });
              }
            });
            
            const masterData = Array.from(masterDataMap.values());

            if (masterData.length === 0) {
              alert("No consolidated data to export.");
              return;
            }

            const wb = XLSX.utils.book_new();
            
            if (finalData.length > 0) {
              const ws1 = XLSX.utils.json_to_sheet(finalData);
              XLSX.utils.book_append_sheet(wb, ws1, "Cases in Review");
            }
            
            if (trackingData.length > 0) {
              const ws2 = XLSX.utils.json_to_sheet(trackingData);
              XLSX.utils.book_append_sheet(wb, ws2, "Active Tracking");
            }

            if (archivedData.length > 0) {
              const ws3 = XLSX.utils.json_to_sheet(archivedData);
              XLSX.utils.book_append_sheet(wb, ws3, "Archived Tracking");
            }
            
            const ws4 = XLSX.utils.json_to_sheet(masterData);
            XLSX.utils.book_append_sheet(wb, ws4, "Master Consolidated");

            XLSX.writeFile(wb, `Sigweb_Detailed_Report_${new Date().toISOString().slice(0, 10)}.xlsx`);
          } catch (error) {
            console.error("Failed to export Excel report:", error);
            alert("An error occurred while generating the report.");
          }
        };

        // =================================================================================
        // INLINED: services/templateService.ts
        // =================================================================================
        const TEMPLATE_STORAGE_KEY = 'sigweb_emailTemplates';

        const loadTemplates = () => {
          try {
            const storedTemplates = localStorage.getItem(TEMPLATE_STORAGE_KEY);
            if (storedTemplates) {
              return JSON.parse(storedTemplates);
            }
          } catch (error) {
            console.error("Failed to load templates from localStorage", error);
          }
          return defaultTemplates;
        };

        const saveTemplates = (templates) => {
          try {
            localStorage.setItem(TEMPLATE_STORAGE_KEY, JSON.stringify(templates));
          } catch (error) {
            console.error("Failed to save templates to localStorage", error);
          }
        };


        // =================================================================================
        // INLINED: services/googleSheetService.ts
        // =================================================================================
        const fetchData = async (url) => {
            const response = await fetch(`${url}?action=getData`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            return {
                finalData: data.finalData || [],
                trackingData: data.trackingData || [],
                archivedData: data.archivedData || [],
            };
        };

        const saveData = async (url, data) => {
            const response = await fetch(url, {
                method: 'POST',
                mode: 'no-cors', // Use no-cors for 'text/plain' to avoid CORS preflight issues with simple requests
                headers: {
                    'Content-Type': 'text/plain', // Keep as text/plain for Apps Script
                },
                body: JSON.stringify(data), // Send the data object directly
            });
            
            // For 'no-cors' requests, we cannot inspect the response.
            // We have to assume success if the request doesn't throw a network error.
            return { status: 'success', message: 'Data sent to server.' };
        };


        // =================================================================================
        // INLINED: components/Spinner.tsx
        // =================================================================================
        const Spinner = () => {
          return (
            <div
              className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-primary border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"
              role="status"
            >
              <span className="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">
                Loading...
              </span>
            </div>
          );
        };


        // =================================================================================
        // INLINED: components/Notification.tsx
        // =================================================================================
        const Notification = ({ message, type, onClose }) => {
          const typeClasses = {
            success: 'bg-green-600',
            error: 'bg-red-600',
            warning: 'bg-yellow-500',
            info: 'bg-blue-600',
          };
          return (
            <div className={`fixed top-5 right-5 z-50 p-4 rounded-lg shadow-lg text-white ${typeClasses[type]} flex items-center gap-4`}>
              <span>{message}</span>
              <button onClick={onClose} className="text-xl font-bold">&times;</button>
            </div>
          );
        };

        // =================================================================================
        // INLINED: components/Header.tsx
        // =================================================================================
        const Header = ({ onSave, onManageTemplates }) => {
          return (
            <header className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 pb-4 border-b border-border-color">
              <div>
                <h1 className="text-3xl font-bold text-white">
                  Sigweb Pro <span className="text-primary">v3.5</span> 🚀
                </h1>
                <p className="text-text-secondary">Integrated Workflow Management System</p>
              </div>
              <div className="flex flex-wrap gap-2">
                <button onClick={onManageTemplates} className="bg-btn-primary hover:bg-btn-primary-hover text-white font-bold py-2 px-4 rounded-lg transition-colors">
                  Manage Templates
                </button>
                <button onClick={onSave} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M5.5 16.5a2.5 2.5 0 01-5 0V4.414a1.5 1.5 0 01.44-1.06L4.354.439A1.5 1.5 0 015.414 0H12.5a2.5 2.5 0 012.5 2.5v2" />
                        <path d="M5.5 16.5h8a2.5 2.5 0 002.5-2.5V8.5h-13v5.5a2.5 2.5 0 002.5 2.5z" />
                        <path d="M10.5 10a.5.5 0 01.5-.5h2a.5.5 0 010 1h-2a.5.5 0 01-.5-.5z" />
                    </svg>
                    Save to Cloud
                </button>
              </div>
            </header>
          );
        };
        

        // =================================================================================
        // INLINED: components/Dashboard.tsx
        // =================================================================================
        const DashboardCard = ({ title, value, icon }) => (
          <div className="bg-surface p-4 rounded-lg border border-border-color flex items-center">
            <div className="text-3xl text-primary mr-4">{icon}</div>
            <div>
              <h4 className="text-sm font-semibold text-text-secondary uppercase tracking-wider">{title}</h4>
              <p className="text-2xl font-bold text-text-primary">{value}</p>
            </div>
          </div>
        );

        const Dashboard = ({ reviewCount, trackingCount, archivedCount, editsCount }) => (
          <section id="dashboard" className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            <DashboardCard title="Cases in Review" value={reviewCount} icon={'📋'} />
            <DashboardCard title="Active Tracking" value={trackingCount} icon={'⏳'} />
            <DashboardCard title="Archived Cases" value={archivedCount} icon={'🗄️'} />
            <DashboardCard title="Session Edits" value={editsCount} icon={'✏️'} />
          </section>
        );


        // =================================================================================
        // INLINED: components/DataInputArea.tsx
        // =================================================================================
        function DataInputArea({
          id,
          title,
          headers,
          data,
          onDataChange,
          onProcess,
          processButtonText = "Process Data",
        }) {
          
          const handlePaste = useCallback((e) => {
            e.preventDefault();
            const pastedText = e.clipboardData.getData('text/plain');
            const newRows = processPastedData(pastedText, headers);

            const updatedData = [...data.filter(row => Object.values(row).some(val => val)), ...newRows];
            
            const emptyRowCount = updatedData.filter(row => !Object.values(row).some(val => val)).length;
            if (emptyRowCount < 5) {
                for (let i = 0; i < (5 - emptyRowCount); i++) {
                    updatedData.push({});
                }
            }

            onDataChange(updatedData);
          }, [data, headers, onDataChange]);

          const handleCellChange = (rowIndex, header, value) => {
            const newData = [...data];
            newData[rowIndex] = { ...newData[rowIndex], [header]: value };
            
            const emptyRowCount = newData.filter(row => !Object.values(row).some(val => val)).length;
            if (emptyRowCount < 5) {
                newData.push({});
            }

            onDataChange(newData);
          };
          
          const clearTable = () => {
            onDataChange(Array(5).fill({}));
          }

          return (
            <section id={id} className="space-y-4">
              <h2 className="text-2xl font-bold text-primary border-b border-border-color pb-2">{title}</h2>
              <div className="table-container max-h-72 overflow-auto border border-border-color rounded-lg">
                <table className="w-full text-sm text-left text-text-secondary">
                  <thead className="text-xs text-text-primary uppercase bg-header sticky top-0">
                    <tr>
                      {headers.map(header => (
                        <th key={header} scope="col" className="px-4 py-3 whitespace-nowrap">{header}</th>
                      ))}
                    </tr>
                  </thead>
                  <tbody onPaste={handlePaste}>
                    {data.map((row, rowIndex) => (
                      <tr key={rowIndex} className="border-b border-border-color hover:bg-highlight">
                        {headers.map(header => (
                          <td
                            key={`${rowIndex}-${header}`}
                            className="px-4 py-2 border-r border-border-color focus:bg-primary focus:text-black outline-none"
                            contentEditable
                            onBlur={(e) => handleCellChange(rowIndex, header, e.currentTarget.innerText)}
                            suppressContentEditableWarning={true}
                          >
                            {row[header] || ''}
                          </td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <div className="flex gap-4">
                <button onClick={onProcess} className="bg-btn-primary hover:bg-btn-primary-hover text-white font-bold py-2 px-4 rounded-lg transition-colors">
                  {processButtonText}
                </button>
                <button onClick={clearTable} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                  Clear Table
                </button>
              </div>
            </section>
          );
        }

        // =================================================================================
        // INLINED: components/ReviewArea.tsx
        // =================================================================================
        const ReviewArea = ({
          data,
          templates,
          updateRow,
          incrementEdits,
          onSendToTracking,
          onPreview,
          sortConfig,
          setSortConfig,
        }) => {
          const [selectedRows, setSelectedRows] = useState(new Set());
          const [filter, setFilter] = useState('');
          
          const REVIEW_HEADERS = [
              { key: 'Fecha_Neg', label: 'Fecha Neg.' },
              { key: 'No_Orden', label: 'No. Orden' },
              { key: 'No_Cedula', label: 'No. Cédula' },
              { key: 'Nombre', label: 'Nombre' },
              { key: 'EPS', label: 'EPS' },
              { key: 'Programa', label: 'Programa', compact: true },
              { key: 'Motivo_Negacion', label: 'Motivo Neg.', compact: true },
              { key: 'Descripcion_PDF', label: 'Descripción', compact: true },
              { key: 'Justificacion_PDF', label: 'Justificación', compact: true },
              { key: 'Fundamento_Legal_PDF', label: 'Fund. Legal', compact: true },
          ];

          const filteredData = useMemo(() => {
            if (!filter) return data;
            const lowercasedFilter = filter.toLowerCase();
            return data.filter(row =>
              Object.values(row).some(value =>
                String(value).toLowerCase().includes(lowercasedFilter)
              )
            );
          }, [data, filter]);

          const handleSelectRow = (noOrden) => {
            const newSelection = new Set(selectedRows);
            if (newSelection.has(noOrden)) {
              newSelection.delete(noOrden);
            } else {
              newSelection.add(noOrden);
            }
            setSelectedRows(newSelection);
          };

          const handleSelectAll = (e) => {
            if (e.target.checked) {
              const allOrderNumbers = filteredData.map(row => row.No_Orden);
              setSelectedRows(new Set(allOrderNumbers));
            } else {
              setSelectedRows(new Set());
            }
          };

          const handleCellBlur = (noOrden, key, value) => {
            const originalRow = data.find(r => r.No_Orden === noOrden);
            if (originalRow && originalRow[key] !== value) {
              updateRow(noOrden, { [key]: value });
              incrementEdits();
            }
          };
          
          const handleSelectChange = (noOrden, value) => {
            const changes = { Tipo_Carta: value };
            const template = templates.find(t => t.id === value);
            if (!template || !template.name.toLowerCase().includes('comp')) {
                changes.Radicado_Comp = '';
            }
            updateRow(noOrden, changes);
          };

          const requestSort = (key) => {
            let direction = 'ascending';
            if (sortConfig.key === key && sortConfig.direction === 'ascending') {
                direction = 'descending';
            }
            setSortConfig({ key, direction });
          };
          
          const getSortIndicator = (key) => {
            if (sortConfig.key !== key) return null;
            return sortConfig.direction === 'ascending' ? ' ▲' : ' ▼';
          };

          return (
            <section id="area3" className="space-y-4">
              <h2 className="text-2xl font-bold text-primary border-b border-border-color pb-2">Area 3: Final Review & Export</h2>
              <div className="action-bar bg-highlight p-4 rounded-lg flex flex-wrap items-center gap-4">
                <input
                  type="text"
                  placeholder="Search in review table..."
                  className="bg-surface border border-border-color rounded-md px-3 py-2 text-text-primary placeholder-text-secondary w-full sm:w-auto"
                  value={filter}
                  onChange={(e) => setFilter(e.target.value)}
                />
                <span className="text-text-primary">{selectedRows.size} row(s) selected</span>
              </div>

              <div className="table-container max-h-[500px] overflow-auto border border-border-color rounded-lg">
                <table className="w-full text-sm text-left text-text-secondary table-auto">
                  <thead className="text-xs text-text-primary uppercase bg-header sticky top-0">
                    <tr>
                      <th className="px-4 py-3"><input type="checkbox" onChange={handleSelectAll} checked={selectedRows.size === filteredData.length && filteredData.length > 0} /></th>
                      <th className="px-4 py-3">👁️</th>
                       {REVIEW_HEADERS.map(({ key, label, compact }) => (
                        <th key={key} onClick={() => requestSort(key)} className={`px-4 py-3 cursor-pointer ${compact ? 'max-w-[150px]' : ''}`}>
                            {label}{getSortIndicator(key)}
                        </th>
                      ))}
                      <th className="px-4 py-3">Tipo de Carta</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredData.map((row) => {
                      const template = templates.find(t => t.id === row.Tipo_Carta);
                      const requiresRadicado = template && template.name.toLowerCase().includes('comp');
                      
                      return (
                        <tr key={row.No_Orden} className="border-b border-border-color hover:bg-highlight">
                          <td className="px-4 py-2"><input type="checkbox" checked={selectedRows.has(row.No_Orden)} onChange={() => handleSelectRow(row.No_Orden)} /></td>
                          <td className="px-4 py-2 text-lg cursor-pointer" onClick={() => onPreview(row)}>👁️</td>
                          {REVIEW_HEADERS.map(({ key, compact }) => (
                            <td key={key} 
                                className={`px-4 py-2 border-r border-border-color focus:bg-primary focus:text-black outline-none ${compact ? 'max-w-[150px] overflow-hidden text-ellipsis whitespace-nowrap' : ''}`}
                                contentEditable
                                onBlur={(e) => handleCellBlur(row.No_Orden, key, e.currentTarget.innerText)}
                                suppressContentEditableWarning={true}
                            >
                                {row[key]}
                            </td>
                          ))}
                          <td className="px-4 py-2">
                            <div className="flex flex-col gap-1">
                              <select 
                                value={row.Tipo_Carta || ''}
                                onChange={(e) => handleSelectChange(row.No_Orden, e.target.value)}
                                className="bg-surface border border-border-color rounded-md px-2 py-1 text-text-primary w-full"
                              >
                                <option value="">-- Select --</option>
                                {templates.map(t => <option key={t.id} value={t.id}>{t.name}</option>)}
                              </select>
                              {requiresRadicado && (
                                <input
                                  type="text"
                                  placeholder="Radicado..."
                                  value={row.Radicado_Comp || ''}
                                  onChange={(e) => updateRow(row.No_Orden, { Radicado_Comp: e.target.value })}
                                  className="bg-surface border border-border-color rounded-md px-2 py-1 text-text-primary w-full mt-1"
                                />
                              )}
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
              <div className="flex gap-4">
                <button 
                    onClick={() => onSendToTracking(Array.from(selectedRows))}
                    className="bg-btn-primary hover:bg-btn-primary-hover text-white font-bold py-2 px-4 rounded-lg transition-colors"
                >
                    Send to Tracking
                </button>
              </div>
            </section>
          );
        };
        

        // =================================================================================
        // INLINED: components/TrackingArea.tsx
        // =================================================================================
        const TrackingTable = ({ data, isArchived, onUpdate, onArchive, filter }) => {
            
          const [selectedRows, setSelectedRows] = useState(new Set());
          
          const statusClasses = {
            'Pendiente': 'bg-yellow-600/20',
            'En Gestión': 'bg-blue-600/20',
            'Finalizado': 'bg-green-600/20',
          };

          const filteredData = useMemo(() => {
            if (!filter) return data;
            const lowercasedFilter = filter.toLowerCase();
            return data.filter(row =>
              Object.values(row).some(value =>
                String(value).toLowerCase().includes(lowercasedFilter)
              )
            );
          }, [data, filter]);

          const handleSelectRow = (index) => {
            const newSelection = new Set(selectedRows);
            if (newSelection.has(index)) {
              newSelection.delete(index);
            } else {
              newSelection.add(index);
            }
            setSelectedRows(newSelection);
          };
          
          const handleSelectAll = (e) => {
            if (e.target.checked) {
              setSelectedRows(new Set(filteredData.map((_, index) => index)));
            } else {
              setSelectedRows(new Set());
            }
          };
          
          const handleBulkArchive = () => {
            if (selectedRows.size > 0) {
              onArchive(Array.from(selectedRows));
              setSelectedRows(new Set());
            }
          };

          return (
            <div className="space-y-4">
              <div className="flex justify-end">
                 {selectedRows.size > 0 && (
                     <button
                        onClick={handleBulkArchive}
                        className="bg-btn-primary hover:bg-btn-primary-hover text-white font-bold py-2 px-4 rounded-lg transition-colors"
                     >
                        {isArchived ? `Unarchive ${selectedRows.size} Selected` : `Archive ${selectedRows.size} Selected`}
                     </button>
                 )}
              </div>
              <div className="table-container max-h-[400px] overflow-auto border border-border-color rounded-lg">
                <table className="w-full text-sm text-left text-text-secondary">
                  <thead className="text-xs text-text-primary uppercase bg-header sticky top-0">
                    <tr>
                      <th className="px-4 py-3"><input type="checkbox" onChange={handleSelectAll} checked={selectedRows.size === filteredData.length && filteredData.length > 0}/></th>
                      <th className="px-4 py-3">Fecha Ing.</th>
                      <th className="px-4 py-3">No. Orden</th>
                      <th className="px-4 py-3">Nombre</th>
                      <th className="px-4 py-3">EPS</th>
                      <th className="px-4 py-3">Radicado</th>
                      <th className="px-4 py-3">Estado</th>
                      <th className="px-4 py-3">Notas</th>
                      <th className="px-4 py-3">Acción</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredData.map((row, index) => {
                      const originalIndex = data.indexOf(row);
                      return (
                      <tr key={originalIndex} className={`border-b border-border-color hover:bg-highlight transition-colors ${isArchived ? 'bg-archive/50 text-text-secondary' : statusClasses[row.Estado] || ''}`}>
                        <td className="px-4 py-2"><input type="checkbox" checked={selectedRows.has(originalIndex)} onChange={() => handleSelectRow(originalIndex)} /></td>
                        <td className="px-4 py-2">{row.Fecha_Ing}</td>
                        <td className="px-4 py-2">{row.No_Orden}</td>
                        <td className="px-4 py-2">{row.Nombre}</td>
                        <td className="px-4 py-2">{row.EPS}</td>
                        <td className="px-4 py-2">{row.Radicado}</td>
                        <td className="px-4 py-2">
                          <select
                            value={row.Estado}
                            onChange={e => onUpdate(originalIndex, { ...row, Estado: e.target.value })}
                            className="bg-surface border border-border-color rounded-md px-2 py-1 text-text-primary"
                          >
                            {TRACKING_STATUSES.map(s => <option key={s} value={s}>{s}</option>)}
                          </select>
                        </td>
                        <td className="px-4 py-2 outline-none focus:bg-primary focus:text-black" contentEditable onBlur={e => onUpdate(originalIndex, { ...row, Notas: e.currentTarget.innerText })} suppressContentEditableWarning={true}>{row.Notas}</td>
                        <td className="px-4 py-2 text-lg cursor-pointer" onClick={() => onArchive([originalIndex])}>{isArchived ? '♻️' : '🗄️'}</td>
                      </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          );
        };

        const TrackingArea = ({ trackingData, archivedData, updateTrackingData, archiveItems }) => {
          const [showArchived, setShowArchived] = useState(false);
          const [filter, setFilter] = useState('');

          return (
            <section id="area4" className="space-y-4">
              <h2 className="text-2xl font-bold text-primary border-b border-border-color pb-2">Area 4: Tracking</h2>
              <div className="action-bar bg-highlight p-4 rounded-lg flex flex-wrap items-center gap-4">
                <input
                  type="text"
                  placeholder="Search in tracking..."
                  className="bg-surface border border-border-color rounded-md px-3 py-2 text-text-primary placeholder-text-secondary w-full sm:w-auto"
                  value={filter}
                  onChange={e => setFilter(e.target.value)}
                />
                <button onClick={() => setShowArchived(!showArchived)} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg">
                  {showArchived ? 'Hide' : 'Show'} Archived ({archivedData.length})
                </button>
              </div>

              <h3 className="text-xl font-semibold text-white">Active Cases ({trackingData.length})</h3>
              <TrackingTable
                data={trackingData}
                isArchived={false}
                onUpdate={(index, row) => updateTrackingData(index, row, false)}
                onArchive={(indices) => archiveItems(indices, false)}
                filter={filter}
              />

              {showArchived && (
                <div className="mt-8">
                  <h3 className="text-xl font-semibold text-white">Archived Cases ({archivedData.length})</h3>
                  <TrackingTable
                    data={archivedData}
                    isArchived={true}
                    onUpdate={(index, row) => updateTrackingData(index, row, true)}
                    onArchive={(indices) => archiveItems(indices, true)}
                    filter={filter}
                  />
                </div>
              )}
            </section>
          );
        };

        // =================================================================================
        // INLINED: components/SetupModal.tsx
        // =================================================================================
        const SetupModal = ({ onSave }) => {
          const [url, setUrl] = useState('');
          const [isVerifying, setIsVerifying] = useState(false);

          const handleSave = async () => {
            if (!url.startsWith('https://script.google.com/macros/s/')) {
                alert("Please enter a valid Google Apps Script URL.");
                return;
            }
            setIsVerifying(true);
            await onSave(url);
            setIsVerifying(false);
          };

          return (
            <div className="fixed inset-0 bg-background bg-opacity-90 flex justify-center items-center z-50 p-4">
              <div className="bg-surface rounded-lg shadow-xl w-full max-w-lg border border-border-color p-8 space-y-6">
                <div className="text-center">
                    <h2 className="text-2xl font-bold text-primary">Initial Setup Required</h2>
                    <p className="text-text-secondary mt-2">
                        Please provide the Google Apps Script URL to connect to your database.
                    </p>
                </div>
                <div>
                    <label htmlFor="script-url" className="block text-sm font-medium text-text-primary mb-1">
                        Script URL
                    </label>
                    <input
                        id="script-url"
                        type="url"
                        value={url}
                        onChange={(e) => setUrl(e.target.value)}
                        placeholder="https://script.google.com/macros/s/..."
                        className="w-full bg-background border border-border-color rounded-md px-3 py-2 text-text-primary placeholder-text-secondary focus:ring-primary focus:border-primary"
                    />
                </div>
                <button
                    onClick={handleSave}
                    disabled={isVerifying || !url}
                    className="w-full bg-btn-primary hover:bg-btn-primary-hover text-white font-bold py-2 px-4 rounded-lg transition-colors disabled:bg-gray-500 disabled:cursor-not-allowed"
                >
                    {isVerifying ? 'Verifying...' : 'Save and Verify Connection'}
                </button>
              </div>
            </div>
          );
        };

        // =================================================================================
        // INLINED: components/TemplateManagerModal.tsx
        // =================================================================================
        const TemplateManagerModal = ({ templates, onClose, onSave, onReset }) => {
          const [currentTemplates, setCurrentTemplates] = useState(templates);
          const [editingTemplate, setEditingTemplate] = useState(null);

          const handleSave = () => {
            onSave(currentTemplates);
            onClose();
          };

          const handleAddNew = () => {
            setEditingTemplate({ id: `tpl_${Date.now()}`, name: '', body: '' });
          };
          
          const handleEdit = (template) => {
            setEditingTemplate({ ...template });
          };

          const handleDelete = (id) => {
            if (window.confirm('Are you sure you want to delete this template?')) {
              setCurrentTemplates(currentTemplates.filter(t => t.id !== id));
            }
          };
          
          const handleSaveTemplateEdit = () => {
            if (!editingTemplate || !editingTemplate.name || !editingTemplate.body) {
              alert('Template name and body cannot be empty.');
              return;
            }

            const existing = currentTemplates.find(t => t.id === editingTemplate.id);
            if (existing) {
              setCurrentTemplates(currentTemplates.map(t => t.id === editingTemplate.id ? editingTemplate : t));
            } else {
              setCurrentTemplates([...currentTemplates, editingTemplate]);
            }
            setEditingTemplate(null);
          };

          return (
            <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-40 p-4">
              <div className="bg-surface rounded-lg shadow-xl w-full max-w-4xl border border-border-color flex flex-col max-h-[90vh]">
                <div className="p-6 border-b border-border-color flex justify-between items-center">
                  <h3 className="text-xl font-bold text-primary">Manage Email Templates</h3>
                  <button onClick={onClose} className="text-text-secondary text-2xl">&times;</button>
                </div>
                
                <div className="p-6 overflow-y-auto space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="text-lg font-semibold mb-2">Current Templates</h4>
                      <ul className="space-y-2 border border-border-color rounded-lg p-2 max-h-96 overflow-y-auto">
                        {currentTemplates.map(template => (
                          <li key={template.id} className="flex justify-between items-center p-2 bg-highlight rounded">
                            <span className="text-text-primary">{template.name}</span>
                            <div className="space-x-2">
                              <button onClick={() => handleEdit(template)} className="text-sm bg-blue-600 hover:bg-blue-700 px-2 py-1 rounded">Edit</button>
                              <button onClick={() => handleDelete(template.id)} className="text-sm bg-danger hover:bg-danger-hover px-2 py-1 rounded">Delete</button>
                            </div>
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    <div>
                      <h4 className="text-lg font-semibold mb-2">{editingTemplate ? 'Edit Template' : 'Create New Template'}</h4>
                      {editingTemplate ? (
                        <div className="space-y-4 p-4 border border-border-color rounded-lg bg-highlight">
                           <input
                            type="text"
                            placeholder="Template Name"
                            value={editingTemplate.name || ''}
                            onChange={(e) => setEditingTemplate({ ...editingTemplate, name: e.target.value })}
                            className="w-full bg-background border border-border-color rounded-md px-3 py-2"
                          />
                          <textarea
                            placeholder="Template Body..."
                            value={editingTemplate.body || ''}
                            onChange={(e) => setEditingTemplate({ ...editingTemplate, body: e.target.value })}
                            className="w-full bg-background border border-border-color rounded-md px-3 py-2 h-40 resize-y"
                          />
                           <p className="text-xs text-text-secondary">Placeholders: {`{{Nombre}}`}, {`{{No_Orden}}`}, etc.</p>
                          <div className="flex gap-2">
                            <button onClick={handleSaveTemplateEdit} className="bg-green-600 hover:bg-green-700 px-3 py-1 rounded text-sm">Save Changes</button>
                            <button onClick={() => setEditingTemplate(null)} className="bg-gray-600 hover:bg-gray-700 px-3 py-1 rounded text-sm">Cancel</button>
                          </div>
                        </div>
                      ) : (
                        <button onClick={handleAddNew} className="w-full bg-btn-primary hover:bg-btn-primary-hover text-white font-bold py-2 px-4 rounded-lg">
                          Add New Template
                        </button>
                      )}
                    </div>
                  </div>
                </div>

                <div className="p-4 bg-header flex justify-between items-center rounded-b-lg">
                   <button onClick={onReset} className="bg-danger hover:bg-danger-hover text-white font-bold py-2 px-4 rounded-lg">
                    Restore Defaults
                  </button>
                  <div className="flex gap-4">
                    <button onClick={onClose} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg">
                        Cancel
                    </button>
                    <button onClick={handleSave} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg">
                        Save & Close
                    </button>
                  </div>
                </div>
              </div>
            </div>
          );
        };

        // =================================================================================
        // INLINED: components/PreviewModal.tsx
        // =================================================================================
        const PreviewModal = ({ data, template, onClose }) => {
          const body = template ? replacePlaceholders(template.body, data) : '<b>Error:</b> Template not selected or not found.';

          const copyToClipboard = () => {
            navigator.clipboard.writeText(body.replace(/<br\s*\/?>/gi, '\n'))
              .then(() => alert('Content copied to clipboard!'))
              .catch(err => alert('Failed to copy content.'));
          };

          return (
            <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-40 p-4">
              <div className="bg-surface rounded-lg shadow-xl w-full max-w-3xl border border-border-color flex flex-col">
                <div className="p-6 border-b border-border-color">
                  <h3 className="text-xl font-bold text-primary">Email Preview</h3>
                </div>
                <div 
                  className="p-6 overflow-y-auto max-h-[60vh] bg-white text-black font-serif"
                  dangerouslySetInnerHTML={{ __html: body.replace(/\n/g, '<br>') }}
                />
                <div className="p-4 bg-header flex justify-end gap-4 rounded-b-lg">
                  <button onClick={copyToClipboard} className="bg-btn-primary hover:bg-btn-primary-hover text-white font-bold py-2 px-4 rounded-lg transition-colors">
                    Copy Content
                  </button>
                  <button onClick={onClose} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                    Close
                  </button>
                </div>
              </div>
            </div>
          );
        };
        

        // =================================================================================
        // INLINED: App.tsx (The main application component)
        // =================================================================================
        const App = () => {
          const [state, setState] = useState({
            finalData: [],
            trackingData: [],
            archivedData: [],
            portalData: Array(5).fill({}),
            pdfData: Array(5).fill({}),
            templates: [],
            scriptUrl: null,
            isSetupNeeded: false,
            isLoading: true,
            isSaving: false,
            isTemplateManagerOpen: false,
            previewData: null,
            notification: null,
            editsCount: 0,
            onlineStatus: true,
          });

          const [sortConfig, setSortConfig] = useState({
            key: 'No_Orden',
            direction: 'ascending',
          });

          const hideNotification = () =>
            setState((prev) => ({ ...prev, notification: null }));

          const showNotification = (message, type, duration = 5000) => {
            setState((prev) => ({ ...prev, notification: { message, type } }));
            setTimeout(hideNotification, duration);
          };

          const handleSetScriptUrl = async (url) => {
            setState((prev) => ({ ...prev, isLoading: true }));
            try {
              const data = await fetchData(url);
              localStorage.setItem('sigweb_scriptUrl', url);
              setState((prev) => ({
                ...prev,
                ...data,
                scriptUrl: url,
                isSetupNeeded: false,
                isLoading: false,
              }));
              showNotification('Connection successful and data loaded!', 'success');
            } catch (error) {
              console.error(error);
              showNotification(
                `Connection failed. Please check the URL and script permissions.`,
                'error'
              );
              setState((prev) => ({ ...prev, isLoading: false }));
            }
          };

          useEffect(() => {
            const url = localStorage.getItem('sigweb_scriptUrl');
            const loadedTemplates = loadTemplates();
            setState((prev) => ({ ...prev, templates: loadedTemplates }));

            if (url) {
              handleSetScriptUrl(url);
            } else {
              setState((prev) => ({ ...prev, isSetupNeeded: true, isLoading: false }));
            }

            const updateOnlineStatus = () => {
                setState(prev => ({ ...prev, onlineStatus: navigator.onLine }));
                if (!navigator.onLine) {
                    showNotification("You are offline. Data saving is disabled.", "warning", 10000);
                }
            };

            window.addEventListener('online', updateOnlineStatus);
            window.addEventListener('offline', updateOnlineStatus);
            updateOnlineStatus();

            return () => {
                window.removeEventListener('online', updateOnlineStatus);
                window.removeEventListener('offline', updateOnlineStatus);
            };
          }, []);

          const incrementEdits = () =>
            setState((prev) => ({ ...prev, editsCount: prev.editsCount + 1 }));

          const handleSave = async () => {
            if (!state.scriptUrl) {
              showNotification('Cannot save. Script URL is not configured.', 'error');
              return;
            }
            if (!state.onlineStatus) {
                showNotification('Cannot save while offline.', 'error');
                return;
            }
            setState((prev) => ({ ...prev, isSaving: true }));
            try {
              await saveData(state.scriptUrl, {
                finalData: state.finalData,
                trackingData: state.trackingData,
                archivedData: state.archivedData,
              });
              showNotification('All data saved successfully to the cloud!', 'success');
              setState((prev) => ({ ...prev, editsCount: 0 })); // Reset edits on successful save
            } catch (error) {
              console.error(error);
              showNotification('Failed to save data. Please try again.', 'error');
            } finally {
              setState((prev) => ({ ...prev, isSaving: false }));
            }
          };

          const processPortalData = useCallback(() => {
            const processedData = state.portalData
              .filter((row) => row.No_Orden && String(row.No_Orden).trim())
              .map((row) => ({
                Fecha_Neg: row.Fecha_Neg || '',
                Sucursal: row.Sucursal || '',
                No_Orden: row.No_Orden || '',
                No_Cedula: row.No_Cedula || '',
                Nombre: capitalizeWords(row.Nombre || ''),
                Motivo_Negacion: row.Motivo_Negacion || '',
                Auditor: row.Auditor || '',
                Programa: row.Programa || '',
                Plan: row.Plan || '',
                Antiguedad: row.Antiguedad || '',
                EPS: (row.EPS || '').toUpperCase(),
                Telefono: row.Telefono || '',
                Celular: row.Celular || '',
                Direccion: row.Direccion || '',
                Email: row.Email || '',
                Edad: row.Edad || '',
                Tipo_Usuario: row.Tipo_Usuario || '',
                Usuario_Emitio: row.Usuario_Emitio || '',
                Regional: row.Regional || '',
                Gestion_Negacion: row.Gestion_Negacion || '',
                Descripcion_PDF: '(pendiente)',
                Justificacion_PDF: '(pendiente)',
                Fundamento_Legal_PDF: '(pendiente)',
                Tipo_Carta: '',
                Radicado_Comp: '',
              }));

            setState((prev) => ({ ...prev, finalData: processedData }));
            showNotification(
              `${processedData.length} rows processed from Portal data.`,
              'success'
            );
          }, [state.portalData]);

          const mergePdfData = useCallback(() => {
            const pdfMap = new Map();
            state.pdfData
              .filter((row) => row['Archivo (No. Orden)']?.trim())
              .forEach((row) => {
                pdfMap.set(row['Archivo (No. Orden)'].trim(), {
                  Descripcion_PDF: row.Descripción || '',
                  Justificacion_PDF: row.Justificación || '',
                  Fundamento_Legal_PDF: row['Fundamento Legal'] || '',
                });
              });

            const mergedData = state.finalData.map((finalRow) => {
              const pdfMatch = pdfMap.get(finalRow.No_Orden.trim());
              return pdfMatch ? { ...finalRow, ...pdfMatch } : finalRow;
            });

            setState((prev) => ({ ...prev, finalData: mergedData }));
            showNotification(`PDF data merged into Review Area.`, 'success');
          }, [state.pdfData, state.finalData]);

          const updateFinalDataRow = (noOrden, partialUpdate) => {
            const newData = state.finalData.map(row => 
                row.No_Orden === noOrden ? { ...row, ...partialUpdate } : row
            );
            setState((prev) => ({ ...prev, finalData: newData }));
          };

          const handleSendToTracking = (selectedOrderNumbers) => {
            const itemsToSend = state.finalData.filter(row => selectedOrderNumbers.includes(row.No_Orden))
              .filter((row) => {
                const template = state.templates.find((t) => t.id === row.Tipo_Carta);
                return (
                  template &&
                  template.name.toLowerCase().includes('comp') &&
                  row.Radicado_Comp &&
                  row.Radicado_Comp.trim() !== ''
                );
              });

            if (itemsToSend.length === 0) {
              showNotification(
                "No items to send. Ensure they are 'Complementariedad' type and have a 'Radicado'.",
                'warning'
              );
              return;
            }

            let newTrackingData = [...state.trackingData];
            let newFinalData = [...state.finalData];
            let addedCount = 0;
            let updatedCount = 0;

            itemsToSend.forEach((item) => {
              const existingIndex = newTrackingData.findIndex((t) => t.No_Orden === item.No_Orden);
              if (existingIndex !== -1) {
                 if(window.confirm(`Case ${item.No_Orden} is already in tracking. Do you want to update it?`)) {
                    newTrackingData[existingIndex].Radicado = item.Radicado_Comp;
                    updatedCount++;
                 }
              } else {
                  newTrackingData.push({
                      Fecha_Ing: item.Fecha_Neg,
                      No_Orden: item.No_Orden,
                      Nombre: item.Nombre,
                      EPS: item.EPS,
                      Radicado: item.Radicado_Comp,
                      Estado: 'Pendiente',
                      Notas: '',
                  });
                  addedCount++;
              }
            });
            
            const itemsSentOrderNumbers = itemsToSend.map(i => i.No_Orden);
            newFinalData = newFinalData.filter(f => !itemsSentOrderNumbers.includes(f.No_Orden));


            setState((prev) => ({
              ...prev,
              trackingData: newTrackingData,
              finalData: newFinalData,
            }));
            showNotification(`${addedCount} new items sent, ${updatedCount} items updated in tracking.`, 'success');
          };

          const updateTrackingData = (index, updatedRow, isArchived) => {
            const dataKey = isArchived ? 'archivedData' : 'trackingData';
            const currentData = [...state[dataKey]];
            currentData[index] = updatedRow;
            setState((prev) => ({ ...prev, [dataKey]: currentData }));
          };

          const archiveItems = (indices, fromArchived) => {
            if (fromArchived) { // Unarchive
              const itemsToMove = indices.map(i => state.archivedData[i]).filter(Boolean);
              const remainingArchived = state.archivedData.filter((_, i) => !indices.includes(i));
              setState(prev => ({
                ...prev,
                trackingData: [...prev.trackingData, ...itemsToMove],
                archivedData: remainingArchived,
              }));
            } else { // Archive
              const itemsToMove = indices.map(i => state.trackingData[i]).filter(Boolean);
              const remainingTracking = state.trackingData.filter((_, i) => !indices.includes(i));
              setState(prev => ({
                ...prev,
                archivedData: [...prev.archivedData, ...itemsToMove],
                trackingData: remainingTracking,
              }));
            }
          };

          const handleSaveTemplates = (newTemplates) => {
            setState((prev) => ({ ...prev, templates: newTemplates }));
            saveTemplates(newTemplates);
            showNotification('Email templates saved.', 'success');
          };

          const handleResetTemplates = () => {
            if (window.confirm('Are you sure you want to restore default templates?')) {
              handleSaveTemplates(defaultTemplates);
            }
          };

          const sortedFinalData = React.useMemo(() => {
            let sortableItems = [...state.finalData];
            if (sortConfig.key) {
                sortableItems.sort((a, b) => {
                    const aVal = a[sortConfig.key] || '';
                    const bVal = b[sortConfig.key] || '';
                    if (aVal < bVal) {
                        return sortConfig.direction === 'ascending' ? -1 : 1;
                    }
                    if (aVal > bVal) {
                        return sortConfig.direction === 'ascending' ? 1 : -1;
                    }
                    return 0;
                });
            }
            return sortableItems;
          }, [state.finalData, sortConfig]);

          if (state.isLoading) {
            return <div className="fixed inset-0 bg-background/80 flex items-center justify-center z-50"><Spinner /> <span className="ml-4 text-xl">Loading Data...</span></div>;
          }

          if (state.isSetupNeeded) {
            return <SetupModal onSave={handleSetScriptUrl} />;
          }

          return (
            <div className="p-4 sm:p-8 bg-background min-h-screen">
              {state.notification && (
                <Notification
                  message={state.notification.message}
                  type={state.notification.type}
                  onClose={hideNotification}
                />
              )}
              {!state.onlineStatus && (
                 <div className="bg-yellow-600 text-white text-center p-2 fixed top-0 left-0 w-full z-50">
                   You are currently offline. Data synchronization is paused.
                 </div>
              )}

              <main className="max-w-screen-2xl mx-auto bg-surface p-4 sm:p-6 rounded-xl border border-border-color space-y-8">
                <Header onSave={handleSave} onManageTemplates={() => setState(prev => ({ ...prev, isTemplateManagerOpen: true }))} />
                <Dashboard
                  reviewCount={state.finalData.length}
                  trackingCount={state.trackingData.length}
                  archivedCount={state.archivedData.length}
                  editsCount={state.editsCount}
                />
                <div className="text-right">
                     <button
                        onClick={() => exportDetailedReport(state.finalData, state.trackingData, state.archivedData)}
                        className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors"
                    >
                        Download Detailed Report
                    </button>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  <DataInputArea
                    id="portal-area"
                    title="Area 1: Portal Data"
                    headers={PORTAL_HEADERS}
                    data={state.portalData}
                    onDataChange={(newData) => setState(prev => ({ ...prev, portalData: newData }))}
                    onProcess={processPortalData}
                  />
                  <DataInputArea
                    id="pdf-area"
                    title="Area 2: PDF Extractor Data"
                    headers={PDF_HEADERS}
                    data={state.pdfData}
                    onDataChange={(newData) => setState(prev => ({ ...prev, pdfData: newData }))}
                    onProcess={mergePdfData}
                    processButtonText="Merge with PDF Data"
                  />
                </div>

                <ReviewArea
                  data={sortedFinalData}
                  templates={state.templates}
                  updateRow={updateFinalDataRow}
                  incrementEdits={incrementEdits}
                  onSendToTracking={handleSendToTracking}
                  onPreview={(row) => setState(prev => ({ ...prev, previewData: row }))}
                  sortConfig={sortConfig}
                  setSortConfig={setSortConfig}
                />

                <TrackingArea
                  trackingData={state.trackingData}
                  archivedData={state.archivedData}
                  updateTrackingData={updateTrackingData}
                  archiveItems={archiveItems}
                />
                
                {state.isSaving && <div className="fixed inset-0 bg-background/80 flex items-center justify-center z-50"><Spinner /> <span className="ml-4 text-xl">Saving Data...</span></div>}
              </main>

              {state.isTemplateManagerOpen && (
                <TemplateManagerModal
                  templates={state.templates}
                  onClose={() => setState(prev => ({...prev, isTemplateManagerOpen: false}))}
                  onSave={handleSaveTemplates}
                  onReset={handleResetTemplates}
                />
              )}

              {state.previewData && (
                <PreviewModal
                  data={state.previewData}
                  template={state.templates.find(t => t.id === state.previewData?.Tipo_Carta)}
                  onClose={() => setState(prev => ({...prev, previewData: null}))}
                />
              )}
            </div>
          );
        };

        // =================================================================================
        // INLINED: index.tsx (Render the application)
        // =================================================================================
        const rootElement = document.getElementById('root');
        if (!rootElement) {
          throw new Error("Could not find root element to mount to");
        }
        const root = ReactDOM.createRoot(rootElement);
        root.render(<App />);

    </script>
</body>
</html>
