<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Sigweb v3.3 - Guardado Total en la Nube ☁️</title>
    <style>
        :root { --primary-color: #4e9fef; --background-color: #1e1e1e; --surface-color: #2d2d2d; --text-color: #d4d4d4; --border-color: #444; --header-color: #3a3a3a; --highlight-color: #252526; --warning-color: #d9a016; --archive-color: #3a3a3a; --success-color: #28a745; --error-color: #dc3545;}
        html { scroll-behavior: smooth; }
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; margin: 0; background-color: var(--background-color); color: var(--text-color); }
        .container { max-width: 1800px; margin: auto; background-color: var(--surface-color); padding: 2em; border-radius: 12px; border: 1px solid var(--border-color); margin-top: 2em; }
        h1, h2, h3 { color: var(--primary-color); }
        h3 { border-bottom: 1px solid var(--border-color); padding-bottom: 8px; margin-top: 2em; }
        .table-container { max-height: 250px; overflow: auto; border: 1px solid var(--border-color); margin-bottom: 1em; border-radius: 8px; }
        table { border-collapse: collapse; width: 100%; table-layout: auto; }
        th, td { border: 1px solid var(--border-color); padding: 10px; text-align: left; font-size: 13px; vertical-align: top; }
        td[contenteditable="true"]:focus { background-color: var(--primary-color); color: black; outline: 1px solid var(--primary-color); }
        th { background-color: var(--header-color); font-weight: bold; position: sticky; top: 0; z-index: 10; cursor: pointer; user-select: none; }
        th .sort-indicator { float: right; color: #888; }
        button, .nav-btn { background-color: #0e639c; color: white; border: 1px solid var(--primary-color); font-weight: bold; padding: 10px 15px; margin: 5px; border-radius: 8px; font-size: 14px; cursor: pointer; transition: background-color 0.2s, opacity 0.2s; }
        button:hover, .nav-btn:hover { background-color: #1a73e8; }
        button:disabled { background-color: #3a3a3a; color: #888; border-color: #555; cursor: not-allowed; opacity: 0.6; }
        #clear_all_btn { background-color: #a02d2d; border-color: #f48771; }
        .action-bar { display: flex; align-items: center; gap: 15px; flex-wrap: wrap; margin-top: 10px; padding: 10px; background-color: var(--highlight-color); border-radius: 8px; }
        .step { padding: 2em 0; border-bottom: 1px solid var(--border-color); }
        .nav-bar { text-align: center; margin-bottom: 2em; padding-bottom: 1em; border-bottom: 1px solid var(--border-color); }
        .highlight-warning { background-color: var(--warning-color) !important; color: #1e1e1e !important; }
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.8); z-index: 2000; display: none; justify-content: center; align-items: center; backdrop-filter: blur(5px); }
        .modal-content { background-color: var(--surface-color); border: 1px solid var(--border-color); padding: 25px; border-radius: 10px; width: 80%; max-width: 800px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); }
        .dashboard { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin-bottom: 2em; padding: 1em; background-color: var(--highlight-color); border-radius: 8px; }
        .dashboard-card { background-color: var(--surface-color); padding: 15px; border-radius: 8px; text-align: center; border: 1px solid var(--border-color); }
        #template-editor { display: flex; flex-direction: column; gap: 10px; margin-top: 15px; }
        #template-editor input, #template-editor textarea { width: 95%; padding: 10px; background-color: var(--background-color); color: var(--text-color); border: 1px solid var(--border-color); border-radius: 4px; }
        #notification-container { position: fixed; top: 20px; right: 20px; z-index: 9999; display: flex; flex-direction: column; gap: 10px; }
        .notification { padding: 15px 20px; color: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); opacity: 0; transform: translateX(100%); animation: slideIn 0.5s forwards; min-width: 250px; }
        .notification.hide { animation: slideOut 0.5s forwards; }
        .notification.success { background-color: var(--success-color); } .notification.error { background-color: var(--error-color); } .notification.info { background-color: var(--primary-color); }
        #offline-banner { display: none; background-color: var(--warning-color); color: #1e1e1e; font-weight: bold; text-align: center; padding: 10px; position: sticky; top: 0; z-index: 1500;}
        #setup-overlay { display: none; }
        .setup-content { text-align: center; max-width: 600px; }
        .setup-content input { width: 95%; padding: 12px; margin: 20px 0; background-color: var(--background-color); color: var(--text-color); border: 1px solid var(--border-color); border-radius: 4px; font-size: 16px; }
        #setup-error { color: var(--error-color); font-weight: bold; min-height: 20px; }
        @keyframes slideIn { from { opacity: 0; transform: translateX(100%); } to { opacity: 1; transform: translateX(0); } }
        @keyframes slideOut { from { opacity: 1; transform: translateX(0); } to { opacity: 0; transform: translateX(100%); } }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
</head>
<body>
    <div id="notification-container"></div>
    <div id="offline-banner">🔴 Sin conexión. Los cambios no se guardarán en la nube.</div>
    
    <div id="setup-overlay" class="modal-overlay">
        <div class="setup-content modal-content">
            <h2>Configuración Inicial Requerida</h2>
            <p>Para conectar la herramienta con tu Google Sheet, pega la URL de la aplicación web que obtuviste en el paso 6 de las instrucciones.</p>
            <input type="url" id="script-url-input" placeholder="Pega la URL aquí...">
            <p id="setup-error"></p>
            <button id="verify-url-btn">Guardar y Verificar Conexión</button>
        </div>
    </div>

    <div class="container" id="main-app" style="display: none;">
        <h1>Sigweb v3.3 - Guardado Total en la Nube ☁️</h1>
        <div class="nav-bar">
             <a href="#area1" class="nav-btn">Área 1: Portal</a>
             <a href="#area2" class="nav-btn">Área 2: PDF</a>
             <a href="#area3" class="nav-btn">Área 3: Revisión</a>
             <a href="#area4" class="nav-btn">Área 4: Seguimiento</a>
             <button id="manage_templates_btn" class="nav-btn">Gestionar Plantillas</button>
             <button id="clear_all_btn" title="Borra los datos de la sesión actual (Área 1, 2 y 3). No afecta los datos guardados en Google Sheets.">Limpiar Sesión</button>
        </div>
        <div id="dashboard" class="dashboard">
             <div class="dashboard-card"><h4>Casos en Revisión</h4><p id="db_review_count">0</p></div>
             <div class="dashboard-card"><h4>Seguimiento Activo</h4><p id="db_tracking_count">0</p></div>
             <div class="dashboard-card"><h4>Casos Archivados</h4><p id="db_archived_count">0</p></div>
             <div class="dashboard-card"><h4>Celdas Editadas</h4><p id="db_edits_count">0</p></div>
        </div>
        <div class="action-bar"><button id="export_report_btn">Descargar Reporte Detallado Excel</button></div>

        <div id="area1" class="step">
            <h2>Área 1: Datos del Portal</h2>
            <div class="table-container">
                <table id="portal_table">
                    <thead><tr><th>Fecha Neg.</th><th>Sucursal</th><th>No. Orden</th><th>No. Cédula</th><th>Nombre</th><th>Motivo Negación</th><th>Auditor</th><th>Programa</th><th>Plan</th><th>Antiguedad</th><th>E.P.S</th><th>Teléfono</th><th>Celular</th><th>Dirección</th><th>Email</th><th>Edad</th><th>Tipo Usuario</th><th>Usuario Emitió</th><th>Regional</th><th>Gestión Negacion</th></tr></thead>
                    <tbody></tbody>
                </table>
            </div>
            <button id="process_portal_btn">Paso 1: Procesar Datos del Portal</button>
            <button id="clear_portal_btn">Limpiar Tabla Portal</button>
        </div>

        <div id="area2" class="step">
            <h2>Área 2: Datos del PDF Extractor</h2>
            <div class="table-container">
                <table id="pdf_table">
                    <thead><tr><th>Archivo (No. Orden)</th><th>Descripción</th><th>Justificación</th><th>Fundamento Legal</th><th>Código</th></tr></thead>
                    <tbody></tbody>
                </table>
            </div>
            <button id="merge_pdf_btn" disabled>Paso 2: Combinar con Datos del PDF</button>
            <button id="clear_pdf_btn">Limpiar Tabla PDF</button>
        </div>

        <div id="area3" class="step" style="display:none;">
            <h2>Área 3: Revisión Final y Exportación</h2>
            <div class="action-bar">
                <input type="text" id="final_table_filter" placeholder="Buscar en la tabla de revisión...">
                <button id="save_review_data_btn">💾 Guardar Revisión en la Nube</button>
                <span style="flex-grow: 1;"></span>
                <span>Acciones en Lote:</span>
                <input type="checkbox" id="select_all_final_rows" title="Seleccionar todo">
                <select id="bulk_action_selector"></select>
                <button id="apply_bulk_action_btn">Aplicar</button>
                <span id="selection_counter">0 filas seleccionadas</span>
            </div>
            <div id="final_table_container" class="table-container" style="max-height: 500px;"></div>
            <div class="action-bar">
                <button id="send_to_tracking_btn">Paso 3: Enviar a Seguimiento y Guardar</button>
                <button id="export_btn">Paso 4: Exportar Excel para Envío</button>
            </div>
        </div>
        
        <div id="area4" class="step">
            <h3>Área 4: Seguimiento de Complementariedad (Datos en la Nube)</h3>
            <div class="action-bar">
                <input type="text" id="tracking_filter_input" placeholder="Buscar en seguimiento...">
                <button id="save_tracking_changes_btn">💾 Guardar Cambios de Seguimiento</button>
                <button id="toggle_archived_btn">Mostrar Archivados (0)</button>
                <button id="reconfigure_script_url_btn" title="Cambiar la URL del script de Google Sheets">⚙️</button>
            </div>
            <div id="tracking_table_container" class="table-container" style="max-height: 400px;">
                <table id="tracking_table">
                    <thead><tr><th>Fecha Ing.</th><th>No. Orden</th><th>Nombre</th><th>EPS</th><th>Radicado</th><th>Estado</th><th>Notas</th><th>Acción</th></tr></thead>
                    <tbody id="tracking_body"></tbody>
                </table>
            </div>
             <div id="archived_table_container" class="table-container" style="max-height: 400px; display: none;">
                <h3>Casos Archivados</h3>
                <table id="archived_table">
                    <thead><tr><th>Fecha Ing.</th><th>No. Orden</th><th>Nombre</th><th>EPS</th><th>Radicado</th><th>Estado</th><th>Notas</th><th>Acción</th></tr></thead>
                    <tbody id="archived_body"></tbody>
                </table>
            </div>
        </div>
    </div>
    
    <div id="preview-modal" class="modal-overlay">
        <div class="modal-content">
            <h3>Vista Previa del Correo</h3>
            <div id="preview-content" style="font-family: 'Times New Roman', Times, serif; background-color: white; color: black; padding: 20px; border-radius: 5px; max-height: 70vh; overflow-y: auto;"></div>
            <button id="copy_email_btn">Copiar Contenido</button>
            <button class="close-modal-btn">Cerrar</button>
        </div>
    </div>
    <div id="template-manager-modal" class="modal-overlay">
        <div class="modal-content">
            <h3>Gestionar Plantillas de Correo</h3>
            <ul id="template-manager-list" style="list-style: none; padding: 0; max-height: 200px; overflow-y: auto;"></ul>
            <button id="add_new_template_btn">Crear Nueva Plantilla</button>
            <button id="restore_default_templates_btn" style="background-color: var(--warning-color); margin-left:10px;">Restaurar Plantillas Originales</button>
            <div id="template-editor" style="display:none;">
                <input type="hidden" id="template-id">
                <input type="text" id="template-name" placeholder="Nombre de la Plantilla">
                <textarea id="template-body" placeholder="Cuerpo de la plantilla..."></textarea>
                <div class="placeholders-help" style="font-size: 12px; color: #aaa;">
                    Placeholders: {{Fecha_Neg}}, {{No_Orden}}, {{Nombre}}, {{EPS}}, {{Motivo_Negacion}}, {{Descripcion_PDF}}, {{Justificacion_PDF}}, {{Fundamento_Legal_PDF}}, {{Radicado_Comp}}, {{Oficina_Virtual_EPS}}
                </div>
                <button id="save_template_btn">Guardar Plantilla</button>
                <button id="cancel_edit_template_btn">Cancelar</button>
            </div>
            <button class="close-modal-btn" style="margin-top: 15px;">Cerrar</button>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        let SCRIPT_URL = ''; 

        const mainAppContainer = document.getElementById('main-app');
        const setupOverlay = document.getElementById('setup-overlay');
        const scriptUrlInput = document.getElementById('script-url-input');
        const verifyUrlBtn = document.getElementById('verify-url-btn');
        const setupError = document.getElementById('setup-error');

        async function checkAndInitiateSetup() {
            const storedUrl = localStorage.getItem('sigwebScriptUrl');
            if (storedUrl) {
                SCRIPT_URL = storedUrl;
                mainAppContainer.style.display = 'block';
                initApp();
            } else {
                setupOverlay.style.display = 'flex';
            }
        }

        async function verifyAndSaveUrl() {
            const url = scriptUrlInput.value.trim();
            if (!url.startsWith('https://script.google.com/macros/s/')) {
                setupError.textContent = 'La URL parece incorrecta. Debe empezar con "https://script.google.com...".';
                return;
            }
            verifyUrlBtn.disabled = true;
            verifyUrlBtn.textContent = 'Verificando...';
            setupError.textContent = '';
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error(`El servidor respondió con un error: ${response.status}`);
                const data = await response.json();
                if (typeof data.finalData === 'undefined' || typeof data.trackingData === 'undefined' || typeof data.archivedData === 'undefined') {
                    throw new Error("La respuesta del script no tiene el formato esperado (falta finalData, trackingData o archivedData).");
                }
                localStorage.setItem('sigwebScriptUrl', url);
                SCRIPT_URL = url;
                setupOverlay.style.display = 'none';
                mainAppContainer.style.display = 'block';
                showNotification('✅ ¡Conexión exitosa!', 'success');
                initApp();
            } catch (error) {
                console.error("Error de verificación:", error);
                setupError.textContent = `Falló la conexión. Revisa la URL y los permisos del script ("Cualquier usuario").`;
            } finally {
                verifyUrlBtn.disabled = false;
                verifyUrlBtn.textContent = 'Guardar y Verificar Conexión';
            }
        }
        
        verifyUrlBtn.addEventListener('click', verifyAndSaveUrl);
        
        function initApp() {
            const config = {
                emptyRowsToAdd: 5,
                trackingStatuses: ['Pendiente', 'En Gestión', 'Finalizado'],
                finalTableHeaders: { preview: "👁️", checkbox: `<input type='checkbox' id='select_all_final_rows' title='Seleccionar todo'>`, Fecha_Neg: "Fecha Neg.", No_Orden: "No. Orden", Nombre: "Nombre", EPS: "EPS", Motivo_Negacion: "Motivo Neg.", Descripcion_PDF: "Descripción", Justificacion_PDF: "Justificación", Fundamento_Legal_PDF: "Fund. Legal", Tipo_Carta: "Tipo de Carta" },
                portalHeaders: ["Fecha_Neg", "Sucursal", "No_Orden", "No_Cedula", "Nombre", "Motivo_Negacion", "Auditor", "Programa", "Plan", "Antiguedad", "EPS", "Telefono", "Celular", "Direccion", "Email", "Edad", "Tipo_Usuario", "Usuario_Emitio", "Regional", "Gestion_Negacion"],
                importantPortalIndexes: [0, 2, 3, 4, 5, 7, 10, 14],
            };

            let finalData = [], trackingData = [], archivedData = [], emailTemplates = [], editCounter = 0, isSaving = false;
            const finalTableContainer = document.getElementById('final_table_container');
            const defaultTemplates = [
                { id: "tpl_1", name: "PLANTILLA NEGACION GENERAL", body: "Apreciado usuario; {{Nombre}}\n\nAgradecemos la confianza... acerca del servicio {{Motivo_Negacion}} que en esta oportunidad no está aprobado debido a que corresponde a EXCLUSIÓN ({{Descripcion_PDF}}), ({{Justificacion_PDF}}), ({{Fundamento_Legal_PDF}}).\n\nEl servicio negado anteriormente; debe tramitarlo a través su EPS asignada. Adjuntamos soporte de la carta de negación." },
                { id: "tpl_2", name: "PLANTILLA NO PERTINENCIA Y TEMAS ESTETICOS", body: "Apreciado usuario; {{Nombre}}\n\nAgradecemos la confianza... acerca del servicio {{Motivo_Negacion}} que en esta oportunidad No está aprobado debido a que corresponde a NO PERTINENCIA ({{Descripcion_PDF}}), ({{Justificacion_PDF}}), ({{Fundamento_Legal_PDF}})." },
                { id: "tpl_3", name: "COMPLEMENTARIEDAD RED COINCIDENTE", body: "Apreciado Usuario; {{Nombre}}\n\nAgradecemos la confianza... acerca del servicio ({{Descripcion_PDF}}) que no fue aprobado, debido a que ({{Justificacion_PDF}}), ({{Fundamento_Legal_PDF}}).\n\nSin embargo, está en gestión a través de su EPS ({{EPS}}) con el número de radicado ({{Radicado_Comp}}), puede realizar seguimiento mediante la oficina virtual de la EPS ({{Oficina_Virtual_EPS}}).\n\nAdicional estaremos haciendo seguimiento..." },
                { id: "tpl_4", name: "COMPLEMENTARIEDAD RED NO COINCIDENTE", body: "Agradecemos la confianza... acerca del servicio ({{Descripcion_PDF}}) que no está aprobado, debido a que corresponde a ({{Justificacion_PDF}}), ({{Fundamento_Legal_PDF}}).\n\nEl prestador actual solicitado, no tiene convenio... se radica la solicitud ante su EPS con el número ({{Radicado_Comp}}) por favor realizar seguimiento mediante la oficina virtual de la EPS ({{Oficina_Virtual_EPS}})." },
                { id: "tpl_5", name: "COMPLEMENTARIEDAD AYUDAS DIAGNOSTICAS", body: "Apreciado usuario; {{Nombre}}\n\nAgradecemos la confianza... acerca del servicio ({{Descripcion_PDF}}) que no está aprobado debido a que corresponde a ({{Justificacion_PDF}}), ({{Fundamento_Legal_PDF}}).\n\nSin embargo, se encuentra en gestión a través de su EPS con el número de radicado ({{Radicado_Comp}}), por favor realizar seguimiento mediante la oficina virtual. ({{Oficina_Virtual_EPS}})." }
            ];

            function showNotification(message, type = 'info', duration = 4000) { const container = document.getElementById('notification-container'); const notif = document.createElement('div'); notif.className = `notification ${type}`; notif.textContent = message; container.appendChild(notif); setTimeout(() => { notif.classList.add('hide'); notif.addEventListener('animationend', () => notif.remove()); }, duration); }

            async function loadDataFromSheet() { showNotification("Cargando datos desde la nube...", "info", 3000); try { const response = await fetch(SCRIPT_URL); if (!response.ok) throw new Error(`Error del servidor: ${response.statusText}`); const data = await response.json(); if (data.error) throw new Error(data.error); finalData = data.finalData || []; trackingData = data.trackingData || []; archivedData = data.archivedData || []; displayFinalTable(); renderTrackingTable(); renderArchivedTable(); updateDashboard(); if (finalData.length > 0) document.getElementById('area3').style.display = 'block'; showNotification("✅ Datos cargados con éxito.", "success"); } catch (error) { console.error("Error al cargar datos:", error); showNotification(`🔴 Error al cargar: ${error.message}`, "error", 10000); } }
            async function saveDataToSheet() { if (isSaving || !navigator.onLine) return; isSaving = true; const saveBtns = [document.getElementById('save_tracking_changes_btn'), document.getElementById('save_review_data_btn')]; saveBtns.forEach(btn => {btn.textContent = '💾 Guardando...'; btn.disabled = true;}); try { await fetch(SCRIPT_URL, { method: 'POST', mode: 'no-cors', body: JSON.stringify({ finalData, trackingData, archivedData }) }); showNotification("✅ Cambios guardados en la nube.", "success"); } catch (error) { console.error("Error al guardar:", error); showNotification(`🔴 Error al guardar: ${error.message}`, "error", 10000); } finally { isSaving = false; document.getElementById('save_review_data_btn').textContent = '💾 Guardar Revisión en la Nube'; document.getElementById('save_tracking_changes_btn').textContent = '💾 Guardar Cambios de Seguimiento'; saveBtns.forEach(btn => btn.disabled = false); } }
            
            function loadTemplates() { const storedTemplates = localStorage.getItem('sigwebEmailTemplates'); emailTemplates = storedTemplates ? JSON.parse(storedTemplates) : JSON.parse(JSON.stringify(defaultTemplates)); renderTemplateList(); updateLetterSelectors(); }
            function saveTemplatesAndRefresh() { localStorage.setItem('sigwebEmailTemplates', JSON.stringify(emailTemplates)); loadTemplates(); displayFinalTable(); }
            function restoreDefaultTemplates() { if (confirm("¿Seguro que quieres restaurar las 5 plantillas originales?")) { emailTemplates = JSON.parse(JSON.stringify(defaultTemplates)); saveTemplatesAndRefresh(); showNotification("Plantillas originales restauradas.", "success"); } }
            function renderTemplateList() { document.getElementById('template-manager-list').innerHTML = emailTemplates.map(tpl => `<li><span>${tpl.name}</span><div><button class="edit-template-btn" data-id="${tpl.id}">Editar</button><button class="delete-template-btn" data-id="${tpl.id}">Eliminar</button></div></li>`).join(''); }
            function updateLetterSelectors() { document.getElementById('bulk_action_selector').innerHTML = `<option value="">-- Asignar Carta --</option>` + emailTemplates.map(tpl => `<option value="${tpl.id}">${tpl.name}</option>`).join(''); }

            function handlePaste(e) { e.preventDefault(); const text = (e.clipboardData || window.clipboardData).getData('text/plain'); const pastedRowsData = text.trim().split(/\r?\n/); const tbody = e.target.closest('tbody'); let startRowIndex = Array.from(tbody.rows).findIndex(row => !row.cells[0] || row.cells[0].innerText.trim() === ''); if (startRowIndex === -1) startRowIndex = tbody.rows.length; const headersCount = tbody.parentElement.tHead.rows[0].cells.length; pastedRowsData.forEach((rowData, i) => { const cellsData = rowData.split('\t'); let targetRow = tbody.rows[startRowIndex + i]; if (!targetRow) { targetRow = tbody.insertRow(); for (let j = 0; j < headersCount; j++) targetRow.insertCell().setAttribute('contenteditable', 'true'); } cellsData.forEach((cellData, j) => { if (targetRow.cells[j]) targetRow.cells[j].innerText = cellData.trim(); }); }); const emptyRowCount = Array.from(tbody.rows).filter(r => r.innerText.trim() === '').length; if(emptyRowCount < config.emptyRowsToAdd) { addEmptyRows(tbody, headersCount, config.emptyRowsToAdd - emptyRowCount); } }
            function addEmptyRows(tbody, cellCount, rowCount) { for (let i = 0; i < rowCount; i++) { const row = tbody.insertRow(); for (let j = 0; j < cellCount; j++) row.insertCell().setAttribute('contenteditable', 'true'); } }
            function setupPasteGrid(tableId) { const table = document.getElementById(tableId); if (!table) return; const headersCount = table.querySelector('thead tr').cells.length; const tbody = table.querySelector('tbody'); tbody.innerHTML = ''; addEmptyRows(tbody, headersCount, config.emptyRowsToAdd); table.addEventListener('paste', handlePaste); }
            
            function processPortalData() { const tableRows = document.getElementById('portal_table').querySelector('tbody').rows; for (const row of tableRows) { const cells = row.cells; if (cells.length > 2 && cells[2].innerText.trim()) { let rowObject = {}; config.importantPortalIndexes.forEach(index => { let value = cells[index]?.innerText.trim() || ''; const header = config.portalHeaders[index]; if (header === 'Nombre') value = value.toLowerCase().replace(/\b\w/g, c => c.toUpperCase()); rowObject[header] = value; }); rowObject = {...rowObject, Descripcion_PDF: '(pendiente)', Justificacion_PDF: '(pendiente)', Fundamento_Legal_PDF: '(pendiente)', Tipo_Carta: '', Radicado_Comp: ''}; finalData.push(rowObject); } } if (finalData.length) { document.getElementById('area3').style.display = 'block'; document.getElementById('merge_pdf_btn').disabled = false; displayFinalTable(); } }
            function mergePdfData() { const pdfData = new Map(); const pdfTableRows = document.getElementById('pdf_table').querySelector('tbody').rows; for (const row of pdfTableRows) { const key = row.cells[0]?.innerText.trim(); if (key) pdfData.set(key, { Descripcion_PDF: row.cells[1]?.innerText.trim() || '', Justificacion_PDF: row.cells[2]?.innerText.trim() || '', Fundamento_Legal_PDF: row.cells[3]?.innerText.trim() || '' }); } finalData.forEach(row => { if (pdfData.has(row.No_Orden)) Object.assign(row, pdfData.get(row.No_Orden)); }); displayFinalTable(); }
            
            function displayFinalTable() { if (!finalTableContainer.querySelector('table')) { const table = document.createElement('table'); table.id = 'final_table'; const thead = table.createTHead(); table.createTBody().id = 'final_table_body'; const headerRow = thead.insertRow(); Object.entries(config.finalTableHeaders).forEach(([key, text]) => { const th = document.createElement('th'); th.innerHTML = `${text} <span class="sort-indicator"></span>`; th.dataset.key = key; headerRow.appendChild(th); }); finalTableContainer.innerHTML = ''; finalTableContainer.appendChild(table); } const tbody = document.getElementById('final_table_body'); tbody.innerHTML = finalData.map(getFinalTableRowHTML).join(''); updateDashboard(); }
            function getFinalTableRowHTML(row) { const rowIndex = finalData.indexOf(row); if (rowIndex === -1) return ''; const template = emailTemplates.find(t => t.id === row.Tipo_Carta); const requiresRadicado = template && template.name.toLowerCase().includes('comp'); let warnings = []; if (!row.Email || !row.Email.includes('@')) warnings.push("Email inválido"); if (requiresRadicado && !(row.Radicado_Comp || "").trim()) warnings.push("Falta radicado"); const letterOptions = `<option value="">-- Seleccionar --</option>` + emailTemplates.map(tpl => `<option value="${tpl.id}" ${tpl.id === row.Tipo_Carta ? 'selected' : ''}>${tpl.name}</option>`).join(''); return `<tr data-row-index="${rowIndex}" class="${warnings.length ? 'highlight-warning' : ''}" title="${warnings.join(', ')}"><td class="preview-icon">👁️</td><td><input type="checkbox" class="row-selector"></td><td contenteditable="true" data-key="Fecha_Neg">${row.Fecha_Neg || ''}</td><td contenteditable="true" data-key="No_Orden">${row.No_Orden || ''}</td><td contenteditable="true" data-key="Nombre">${row.Nombre || ''}</td><td contenteditable="true" data-key="EPS">${row.EPS || ''}</td><td contenteditable="true" data-key="Motivo_Negacion" class="compact-cell">${row.Motivo_Negacion || ''}</td><td contenteditable="true" data-key="Descripcion_PDF" class="compact-cell">${row.Descripcion_PDF || ''}</td><td contenteditable="true" data-key="Justificacion_PDF" class="compact-cell">${row.Justificacion_PDF || ''}</td><td contenteditable="true" data-key="Fundamento_Legal_PDF" class="compact-cell">${row.Fundamento_Legal_PDF || ''}</td><td><select class="letter-selector">${letterOptions}</select>${requiresRadicado ? `<div class="extra-input-container"><input type="text" class="radicado-input" value="${row.Radicado_Comp || ''}" placeholder="Radicado..."></div>` : ''}</td></tr>`; }
            function updateFinalTableRow(index) { const rowElement = finalTableContainer.querySelector(`tr[data-row-index="${index}"]`); if (rowElement) { const isChecked = rowElement.querySelector('.row-selector')?.checked; rowElement.outerHTML = getFinalTableRowHTML(finalData[index]); const newRowElement = finalTableContainer.querySelector(`tr[data-row-index="${index}"]`); if(newRowElement && isChecked) newRowElement.querySelector('.row-selector').checked = true; } }
            
            function renderTrackingTable() { document.getElementById('tracking_body').innerHTML = trackingData.map(item => getTrackingTableRowHTML(item, false)).join(''); updateDashboard(); }
            function renderArchivedTable() { document.getElementById('archived_body').innerHTML = archivedData.map(item => getTrackingTableRowHTML(item, true)).join(''); document.getElementById('toggle_archived_btn').innerText = `Mostrar Archivados (${archivedData.length})`; }
            function getTrackingTableRowHTML(item, isArchived) { const dataArray = isArchived ? archivedData : trackingData; const index = dataArray.indexOf(item); const statusOptions = config.trackingStatuses.map(s => `<option value="${s}" ${s === item.Estado ? 'selected' : ''}>${s}</option>`).join(''); const actionIcon = isArchived ? `<td class="action-icon" data-action="unarchive" title="Restaurar">♻️</td>` : `<td class="action-icon" data-action="archive" title="Archivar">🗄️</td>`; return `<tr data-index="${index}" data-is-archived="${isArchived}" class="${isArchived ? 'archived-row' : ''}"><td>${item.Fecha_Neg || ''}</td><td>${item.No_Orden || ''}</td><td>${item.Nombre || ''}</td><td>${item.EPS || ''}</td><td>${item.Radicado || ''}</td><td><select class="status-selector">${statusOptions}</select></td><td contenteditable="true" class="notes-cell">${item.Notas || ''}</td>${actionIcon}</tr>`;}
            
            function setupEventListeners() {
                document.getElementById('reconfigure_script_url_btn').addEventListener('click', () => { if(confirm("¿Seguro que quieres cambiar la URL de conexión? Deberás reiniciar la página.")){ localStorage.removeItem('sigwebScriptUrl'); location.reload(); }});
                document.getElementById('process_portal_btn').addEventListener('click', () => processPortalData());
                document.getElementById('merge_pdf_btn').addEventListener('click', () => mergePdfData());
                document.getElementById('clear_all_btn').addEventListener('click', () => { if (confirm("¿Seguro que quieres limpiar la sesión actual? Esto no afectará los datos en la nube.")) { finalData = []; displayFinalTable(); } });
                document.getElementById('clear_portal_btn').addEventListener('click', () => { document.getElementById('portal_table').querySelector('tbody').innerHTML = ''; setupPasteGrid('portal_table'); });
                document.getElementById('clear_pdf_btn').addEventListener('click', () => { document.getElementById('pdf_table').querySelector('tbody').innerHTML = ''; setupPasteGrid('pdf_table'); });
                document.getElementById('final_table_filter').addEventListener('keyup', () => displayFinalTable());
                document.getElementById('select_all_final_rows').addEventListener('change', (e) => { finalTableContainer.querySelectorAll('.row-selector').forEach(cb => cb.checked = e.target.checked); updateSelectionCounter(); });
                document.getElementById('apply_bulk_action_btn').addEventListener('click', applyBulkAction);
                document.getElementById('send_to_tracking_btn').addEventListener('click', sendToTracking);
                document.getElementById('export_btn').addEventListener('click', exportFinalData);
                document.getElementById('export_report_btn').addEventListener('click', exportComprehensiveReport);
                finalTableContainer.addEventListener('click', handleFinalTableClick);
                finalTableContainer.addEventListener('change', handleFinalTableChange);
                finalTableContainer.addEventListener('input', handleFinalTableInput);
                finalTableContainer.addEventListener('blur', handleFinalTableBlur, true);
                document.getElementById('save_review_data_btn').addEventListener('click', saveDataToSheet);
                document.getElementById('save_tracking_changes_btn').addEventListener('click', saveDataToSheet);
                document.getElementById('toggle_archived_btn').addEventListener('click', () => { document.getElementById('archived_table_container').style.display = document.getElementById('archived_table_container').style.display === 'none' ? 'block' : 'none'; });
                document.getElementById('tracking_table').tBodies[0].addEventListener('click', handleTrackingTableInteraction);
                document.getElementById('archived_table').tBodies[0].addEventListener('click', handleTrackingTableInteraction);
                document.getElementById('tracking_table').tBodies[0].addEventListener('change', handleTrackingTableInteraction);
                document.getElementById('archived_table').tBodies[0].addEventListener('change', handleTrackingTableInteraction);
                document.querySelectorAll('.close-modal-btn').forEach(btn => btn.addEventListener('click', (e) => e.target.closest('.modal-overlay').style.display = 'none'));
                document.getElementById('copy_email_btn').addEventListener('click', copyEmailToClipboard);
                document.getElementById('manage_templates_btn').addEventListener('click', () => { document.getElementById('template-manager-modal').style.display = 'flex'; });
                document.getElementById('add_new_template_btn').addEventListener('click', () => { document.getElementById('template-editor').style.display = 'flex'; document.getElementById('template-id').value = ''; document.getElementById('template-name').value = ''; document.getElementById('template-body').value = ''; });
                document.getElementById('restore_default_templates_btn').addEventListener('click', restoreDefaultTemplates);
                document.getElementById('save_template_btn').addEventListener('click', saveTemplateFromEditor);
                document.getElementById('cancel_edit_template_btn').addEventListener('click', () => document.getElementById('template-editor').style.display = 'none');
                document.getElementById('template-manager-list').addEventListener('click', handleTemplateListClick);
                window.addEventListener('online', () => { document.getElementById('offline-banner').style.display = 'none'; showNotification("✅ Conexión a internet restaurada.", "success"); loadDataFromSheet(); });
                window.addEventListener('offline', () => { document.getElementById('offline-banner').style.display = 'block'; showNotification("🔴 Sin conexión. No se pueden guardar cambios.", "error", 10000); });
            }
            
            function handleFinalTableClick(e) { const target = e.target; if (target.classList.contains('preview-icon')) { previewEmail(target.closest('tr').dataset.rowIndex); } else if (target.classList.contains('row-selector')) { updateSelectionCounter(); } else if(target.closest('th')?.dataset.key) { sortTable(target.closest('th').dataset.key); } }
            function handleFinalTableChange(e) { const target = e.target; const rowIndex = target.closest('tr').dataset.rowIndex; if (!rowIndex) return; if (target.classList.contains('letter-selector')) { finalData[rowIndex].Tipo_Carta = target.value; if (!emailTemplates.find(t => t.id === target.value)?.name.toLowerCase().includes('comp')) { finalData[rowIndex].Radicado_Comp = ''; } updateFinalTableRow(rowIndex); } }
            function handleFinalTableInput(e) { const target = e.target; const rowIndex = target.closest('tr')?.dataset.rowIndex; if (rowIndex && target.classList.contains('radicado-input')) { finalData[rowIndex].Radicado_Comp = target.value; } }
            function handleFinalTableBlur(e) { const target = e.target; const rowIndex = target.closest('tr')?.dataset.rowIndex; const dataKey = target.dataset.key; if (rowIndex && dataKey && target.isContentEditable) { const newValue = target.innerText.trim(); if (finalData[rowIndex][dataKey] !== newValue) { finalData[rowIndex][dataKey] = newValue; editCounter++; updateDashboard(); updateFinalTableRow(rowIndex); } } else if (rowIndex && target.classList.contains('radicado-input')) { updateFinalTableRow(rowIndex); } }
            function handleTrackingTableInteraction(e) { const tr = e.target.closest('tr'); if (!tr) return; const index = tr.dataset.index; const isArchived = tr.dataset.isArchived === 'true'; const dataArray = isArchived ? archivedData : trackingData; let item = dataArray[index]; if (!item) return; if(e.target.classList.contains('status-selector')) { item.Estado = e.target.value; } else if (e.target.isContentEditable) { item.Notas = e.target.innerText; } else if (e.target.dataset.action === 'archive') { archivedData.push(trackingData.splice(index, 1)[0]); renderTrackingTable(); renderArchivedTable(); } else if (e.target.dataset.action === 'unarchive') { trackingData.push(archivedData.splice(index, 1)[0]); renderTrackingTable(); renderArchivedTable(); } }
            function handleTemplateListClick(e) { const id = e.target.dataset.id; if (e.target.classList.contains('edit-template-btn')) { const template = emailTemplates.find(t => t.id === id); document.getElementById('template-editor').style.display = 'flex'; document.getElementById('template-id').value = template.id; document.getElementById('template-name').value = template.name; document.getElementById('template-body').value = template.body; } else if (e.target.classList.contains('delete-template-btn')) { if(confirm("¿Seguro?")) { emailTemplates = emailTemplates.filter(t => t.id !== id); saveTemplatesAndRefresh(); } } }
            function saveTemplateFromEditor() { const id = document.getElementById('template-id').value; const name = document.getElementById('template-name').value.trim(); const body = document.getElementById('template-body').value.trim(); if (!name || !body) return alert("El nombre y el cuerpo no pueden estar vacíos."); if (id) { const index = emailTemplates.findIndex(t => t.id === id); if (index !== -1) emailTemplates[index] = { id, name, body }; } else { emailTemplates.push({ id: `tpl_${Date.now()}`, name, body }); } saveTemplatesAndRefresh(); document.getElementById('template-editor').style.display = 'none'; }
            function sortTable(key) { /*...*/}
            function previewEmail(index) { const rowData = finalData[index]; const template = emailTemplates.find(tpl => tpl.id === rowData.Tipo_Carta); let body = `<b>Error: Plantilla no encontrada.</b>`; if (template) { const getOficinaVirtual = (eps) => { const e = (eps || "").toUpperCase(); if (e.includes("NUEVA EPS")) return `<a href='https://portal.nuevaeps.com.co/'>NUEVA EPS</a>`; if (e.includes("SALUD TOTAL")) return `<a href='https://saludtotal.com.co/'>SALUD TOTAL</a>`; return eps; }; const fullData = { ...rowData, Oficina_Virtual_EPS: getOficinaVirtual(rowData.EPS) }; body = template.body.replace(/\{\{(\w+)\}\}/g, (match, key) => fullData[key] || match); } document.getElementById('preview-content').innerHTML = body.replace(/\n/g, '<br>'); document.getElementById('preview-modal').style.display = 'flex'; }
            function updateSelectionCounter() { document.getElementById('selection_counter').textContent = `${finalTableContainer.querySelectorAll('.row-selector:checked').length} fila(s) seleccionada(s)`; }
            function applyBulkAction() { const selectedAction = document.getElementById('bulk_action_selector').value; if (!selectedAction) return; finalTableContainer.querySelectorAll('.row-selector:checked').forEach(cb => { const rowIndex = cb.closest('tr').dataset.rowIndex; finalData[rowIndex].Tipo_Carta = selectedAction; updateFinalTableRow(rowIndex); }); }
            function sendToTracking() { const itemsToSend = finalData.filter(row => { const template = emailTemplates.find(t => t.id === row.Tipo_Carta); return template && template.name.toLowerCase().includes('comp') && row.Radicado_Comp?.trim(); }); itemsToSend.forEach(row => { const existingIndex = trackingData.findIndex(item => item.No_Orden === row.No_Orden); if (existingIndex === -1) trackingData.push({ Fecha_Neg: row.Fecha_Neg, No_Orden: row.No_Orden, Nombre: row.Nombre, EPS: row.EPS, Radicado: row.Radicado_Comp, Estado: 'Pendiente', Notas: '' }); }); renderTrackingTable(); saveDataToSheet(); showNotification(`${itemsToSend.length} caso(s) enviados a seguimiento.`, 'info'); }
            async function copyEmailToClipboard() { await navigator.clipboard.writeText(document.getElementById('preview-content').innerText); showNotification('Contenido copiado.', 'success'); }
            function exportFinalData() { if (!finalData.length) return alert("No hay datos para exportar."); const ws = XLSX.utils.json_to_sheet(finalData); const wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, ws, "DatosParaEnvio"); XLSX.writeFile(wb, "Sigweb_Procesado.xlsx"); } 
            function exportComprehensiveReport() { const masterDataMap = new Map(); [...finalData, ...trackingData, ...archivedData].forEach(row => { if (row.No_Orden) { const key = row.No_Orden.trim(); if (!masterDataMap.has(key)) { masterDataMap.set(key, { ...row }); } else { masterDataMap.set(key, { ...masterDataMap.get(key), ...row }); } } }); if(masterDataMap.size === 0) return alert("No hay datos para exportar."); const wb = XLSX.utils.book_new(); const ws = XLSX.utils.json_to_sheet(Array.from(masterDataMap.values())); XLSX.utils.book_append_sheet(wb, ws, "Consolidado Maestro"); XLSX.writeFile(wb, `Sigweb_Reporte_Detallado.xlsx`); }
            function updateDashboard(){ document.getElementById('db_review_count').textContent = finalData.length; document.getElementById('db_tracking_count').textContent = trackingData.length; document.getElementById('db_archived_count').textContent = archivedData.length; document.getElementById('db_edits_count').textContent = editCounter; }

            setupEventListeners();
            setupPasteGrid('portal_table'); setupPasteGrid('pdf_table');
            loadTemplates();
            if (navigator.onLine) { loadDataFromSheet(); } 
            else { document.getElementById('offline-banner').style.display = 'block'; showNotification("🔴 Sin conexión.", "error", 10000); }
        }

        checkAndInitiateSetup();
    });
    </script>
</body>
</html>
