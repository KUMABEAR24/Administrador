<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Buscadores Cuadrantes</title>
    <style>
        /* Importa la fuente Inter de Google Fonts para un diseño limpio */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');

        :root {
            --bg-color-dark: #1E1E2E;
            --bg-color-light: #2D2D44;
            --accent-color: #5D5FEF;
            --secondary-accent: #37B7C3;
            --text-color-light: #E0E0E0;
            --text-color-dark: #A0A0A0;
            --border-color: #444455;
            --shadow-light: rgba(0, 0, 0, 0.2);
            --shadow-dark: rgba(0, 0, 0, 0.4);
        }

        /* Estilos generales del cuerpo */
        body {
            margin: 0;
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-color-dark);
            color: var(--text-color-light);
            display: flex;
            flex-direction: column;
            height: 100vh;
            box-sizing: border-box;
            overflow: hidden;
        }

        /* Estilos del menú superior */
        .top-menu {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: var(--bg-color-light);
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 15px 30px;
            z-index: 1000;
            border-bottom: 2px solid var(--border-color);
            box-shadow: 0 4px 15px var(--shadow-dark);
        }

        .top-menu span {
            font-size: 24px;
            font-weight: 700;
            color: var(--accent-color);
            letter-spacing: 1px;
            position: absolute;
            left: 30px;
        }

        .top-menu .menu-buttons {
            display: flex;
            gap: 15px;
        }

        .top-menu button {
            background-color: var(--secondary-accent);
            color: white;
            border: none;
            padding: 10px 18px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }
        
        /* Estilo para el nuevo botón de reinicio */
        .top-menu button.reset-btn {
            background-color: #E74C3C;
        }
        
        .top-menu button:hover {
            background-color: #2CA3AF;
            transform: translateY(-2px);
        }

        .top-menu button.reset-btn:hover {
            background-color: #C0392B;
        }

        /* Contenedor principal de la cuadrícula de buscadores */
        .grid-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            gap: 20px;
            padding: 90px 20px 20px 20px;
            flex-grow: 1;
            overflow-y: auto;
        }
        
        .grid-container .search-box:nth-child(1) { grid-area: 1 / 1 / 2 / 2; }
        .grid-container .search-box:nth-child(2) { grid-area: 1 / 2 / 2 / 3; }
        .grid-container .search-box:nth-child(3) { grid-area: 2 / 1 / 3 / 2; }
        .grid-container .search-box:nth-child(4) { grid-area: 2 / 2 / 3 / 3; }

        /* Estilos de cada cuadro de búsqueda */
        .search-box {
            background-color: var(--bg-color-light);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 20px var(--shadow-dark);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            position: relative;
            display: flex;
            flex-direction: column;
            resize: both;
            overflow: hidden; /* Cambiado a hidden para que la tabla tenga su propio scroll */
            min-height: 200px;
        }

        .search-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 25px var(--shadow-dark);
        }

        .search-box h3 {
            margin: 0 0 15px;
            color: var(--accent-color);
            font-size: 18px;
            font-weight: 500;
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 10px;
            flex-shrink: 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .search-box h3 .sync-icon {
            color: #ccc;
            cursor: pointer;
            transition: color 0.3s;
        }

        .search-box h3 .sync-icon.active {
            color: #2ECC71;
        }

        .search-box input {
            width: 100%;
            padding: 12px;
            margin-bottom: 15px;
            background-color: var(--bg-color-dark);
            border: 1px solid var(--border-color);
            color: var(--text-color-light);
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            box-sizing: border-box;
            flex-shrink: 0;
        }

        .search-box input:focus {
            border-color: var(--accent-color);
            outline: none;
            box-shadow: 0 0 8px rgba(93, 95, 239, 0.5);
        }
        
        /* Botón de opciones de cada cuadro */
        .options-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: transparent;
            border: none;
            color: var(--text-color-dark);
            font-size: 24px;
            cursor: pointer;
            border-radius: 50%;
            transition: background-color 0.3s, color 0.3s;
        }

        .options-toggle:hover {
            background-color: var(--border-color);
            color: var(--text-color-light);
        }
        
        /* Panel de opciones */
        .options-panel {
            display: none;
            margin-top: 10px;
            border-top: 1px solid var(--border-color);
            padding-top: 10px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .options-panel button {
            background-color: var(--secondary-accent);
            padding: 8px 12px;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            border: none;
            color: white;
            transition: background-color 0.3s ease;
        }
        
        .options-panel button:hover {
            background-color: #2CA3AF;
        }

        /* Estilo para el checkbox de búsqueda exacta */
        .options-panel .exact-match-toggle {
            display: flex;
            align-items: center;
            gap: 5px;
            color: var(--text-color-light);
            font-size: 14px;
        }

        /* Contenedor de resultados */
        .results {
            flex-grow: 1;
            overflow: auto;
            background-color: var(--bg-color-dark);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid var(--border-color);
            box-shadow: inset 0 0 10px var(--shadow-dark);
            min-height: 100px;
        }

        /* Estilos de la tabla de resultados */
        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
            color: var(--text-color-light);
            font-size: 14px;
        }

        th, td {
            border: 1px solid var(--border-color);
            padding: 10px;
            text-align: left;
            word-wrap: break-word;
        }

        th {
            background-color: #38384F;
            font-weight: 500;
            color: var(--secondary-accent);
            cursor: pointer;
        }

        /* Clases de resaltado para la Búsqueda 4 (AYUDANTE) */
        .highlight-green {
            color: #2ECC71;
            font-weight: bold;
        }

        .highlight-red {
            color: #E74C3C;
            font-weight: bold;
        }
        
        /* Clases de resaltado de búsqueda */
        .search-highlight {
            background-color: #f7e127;
            color: #333;
            font-weight: bold;
        }

        /* Clase para el modo de pantalla completa */
        .fullscreen {
            position: fixed !important;
            top: 90px !important;
            left: 20px !important;
            width: calc(100% - 40px) !important;
            height: calc(100vh - 110px) !important;
            z-index: 999;
        }
        
        /* Estilos del modal de configuración */
        .config-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: var(--bg-color-light);
            border: 1px solid var(--border-color);
            padding: 30px;
            border-radius: 15px;
            z-index: 1001;
            display: none;
            width: 500px;
            max-width: 90%;
            box-shadow: 0 10px 25px var(--shadow-dark);
        }
        
        .config-modal h2 {
            margin-top: 0;
            color: var(--accent-color);
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        .config-modal label, .config-modal p {
            display: block;
            margin-bottom: 8px;
            color: var(--text-color-light);
            font-weight: 500;
        }

        .config-modal input[type="file"] {
            margin-bottom: 15px;
            color: var(--text-color-light);
            background-color: var(--bg-color-dark);
            border: 1px solid var(--border-color);
            padding: 8px;
            border-radius: 8px;
            cursor: pointer;
        }

        .config-modal .close-btn {
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            color: var(--text-color-dark);
            font-size: 24px;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .config-modal .close-btn:hover {
            color: #E74C3C;
        }
        
        .config-modal button {
            background-color: var(--accent-color);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            width: 100%;
            font-weight: 500;
            transition: background-color 0.3s ease;
            margin-top: 10px;
        }
        
        .config-modal button:hover {
            background-color: #4C4EE6;
        }

        .confirmation {
            color: #2ECC71;
            font-size: 14px;
            margin-top: 15px;
            text-align: center;
        }
        
        /* Modal personalizado de alerta */
        .custom-alert {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: var(--bg-color-light);
            border: 1px solid var(--border-color);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px var(--shadow-dark);
            z-index: 1002;
            display: none;
            text-align: center;
        }
        .custom-alert p {
            margin: 0 0 15px;
        }
        .custom-alert button {
            background-color: var(--accent-color);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
        }
        
        /* Estilos de la barra de progreso */
        .progress-container {
            width: 100%;
            background-color: var(--bg-color-dark);
            border: 1px solid var(--border-color);
            border-radius: 5px;
            margin-top: 15px;
            overflow: hidden;
        }

        .progress-bar {
            height: 20px;
            width: 0%;
            background-color: var(--secondary-accent);
            text-align: center;
            line-height: 20px;
            color: white;
            transition: width 0.3s ease;
        }

        /* Estilo para el icono de descarga */
        .download-icon {
            font-size: 16px;
            margin-left: 5px;
        }

        /* Media queries para dispositivos móviles */
        @media (max-width: 768px) {
            .grid-container {
                grid-template-columns: 1fr;
                padding: 80px 10px 10px 10px;
            }
        }
    </style>
</head>
<body onload="loadDataFromStorage()">

    <!-- Menú Superior -->
    <div class="top-menu">
        <span>Buscadores Cuadrantes</span>
        <div class="menu-buttons">
            <button onclick="resetLayout()" class="reset-btn">Reiniciar diseño</button>
            <button onclick="openConfig()">Configuración</button>
        </div>
    </div>

    <!-- Contenedor de la cuadrícula de buscadores -->
    <div class="grid-container">
        <!-- Cuadro de Búsqueda 1: Matriz de CUPS -->
        <div class="search-box" id="box1" style="grid-area: 1 / 1 / 2 / 2;">
            <button class="options-toggle" onclick="toggleOptions('options1')">▾</button>
            <h3>
                <span>Matriz de CUPS</span>
                <span class="sync-icon" id="sync1" onclick="toggleSync('1')">🔄</span>
            </h3>
            <div class="input-container">
                <input type="text" id="input1" oninput="debounceSearch('input1', 'results1')">
                <span class="progress-percent" id="progress1">0%</span>
            </div>
            <div class="options-panel" id="options1">
                <button onclick="modoCompacto('box1')">Modo compacto</button>
                <button onclick="fijarCuadro('box1')">Fijar</button>
                <button onclick="pantallaCompleta('box1')">Pantalla completa</button>
                <button onclick="copiarResultados('results1')">Copiar</button>
                <button onclick="exportToCsv('results1', 'cups.csv')">Exportar CSV</button>
                <button onclick="reiniciarCuadro('input1','results1')">Reiniciar</button>
                <label class="exact-match-toggle">
                    <input type="checkbox" id="exact1"> Búsqueda exacta
                </label>
            </div>
            <div class="results" id="results1"></div>
        </div>

        <!-- Cuadro de Búsqueda 2: Prestadores -->
        <div class="search-box" id="box2" style="grid-area: 1 / 2 / 2 / 3;">
            <button class="options-toggle" onclick="toggleOptions('options2')">▾</button>
            <h3>
                <span>Prestadores</span>
                <span class="sync-icon" id="sync2" onclick="toggleSync('2')">🔄</span>
            </h3>
            <div class="input-container">
                <input type="text" id="input2" oninput="debounceSearch('input2', 'results2')">
                <span class="progress-percent" id="progress2">0%</span>
            </div>
            <div class="options-panel" id="options2">
                <button onclick="modoCompacto('box2')">Modo compacto</button>
                <button onclick="fijarCuadro('box2')">Fijar</button>
                <button onclick="pantallaCompleta('box2')">Pantalla completa</button>
                <button onclick="copiarResultados('results2')">Copiar</button>
                <button onclick="exportToCsv('results2', 'prestadores.csv')">Exportar CSV</button>
                <button onclick="reiniciarCuadro('input2','results2')">Reiniciar</button>
                <label class="exact-match-toggle">
                    <input type="checkbox" id="exact2"> Búsqueda exacta
                </label>
            </div>
            <div class="results" id="results2"></div>
        </div>

        <!-- Cuadro de Búsqueda 3: Cartas a enviar Sorweb -->
        <div class="search-box" id="box3" style="grid-area: 2 / 1 / 3 / 2;">
            <button class="options-toggle" onclick="toggleOptions('options3')">▾</button>
            <h3>
                <span>Cartas a enviar Sorweb</span>
                <span class="sync-icon" id="sync3" onclick="toggleSync('3')">🔄</span>
            </h3>
            <div class="input-container">
                <input type="text" id="input3" oninput="debounceSearch('input3', 'results3')">
                <span class="progress-percent" id="progress3">0%</span>
            </div>
            <div class="options-panel" id="options3">
                <button onclick="modoCompacto('box3')">Modo compacto</button>
                <button onclick="fijarCuadro('box3')">Fijar</button>
                <button onclick="pantallaCompleta('box3')">Pantalla completa</button>
                <button onclick="copiarResultados('results3')">Copiar</button>
                <button onclick="exportToCsv('results3', 'cartas.csv')">Exportar CSV</button>
                <button onclick="reiniciarCuadro('input3','results3')">Reiniciar</button>
                <label class="exact-match-toggle">
                    <input type="checkbox" id="exact3"> Búsqueda exacta
                </label>
            </div>
            <div class="results" id="results3"></div>
        </div>

        <!-- Cuadro de Búsqueda 4: AYUDANTE -->
        <div class="search-box" id="box4" style="grid-area: 2 / 2 / 3 / 3;">
            <button class="options-toggle" onclick="toggleOptions('options4')">▾</button>
            <h3>
                <span>AYUDANTE</span>
                <span class="sync-icon" id="sync4" onclick="toggleSync('4')">🔄</span>
            </h3>
            <div class="input-container">
                <input type="text" id="input4" oninput="debounceSearch('input4', 'results4')">
                <span class="progress-percent" id="progress4">0%</span>
            </div>
            <div class="options-panel" id="options4">
                <button onclick="modoCompacto('box4')">Modo compacto</button>
                <button onclick="fijarCuadro('box4')">Fijar</button>
                <button onclick="pantallaCompleta('box4')">Pantalla completa</button>
                <button onclick="copiarResultados('results4')">Copiar</button>
                <button onclick="exportToCsv('results4', 'ayudante.csv')">Exportar CSV</button>
                <button onclick="reiniciarCuadro('input4','results4')">Reiniciar</button>
                <label class="exact-match-toggle">
                    <input type="checkbox" id="exact4"> Búsqueda exacta
                </label>
            </div>
            <div class="results" id="results4"></div>
        </div>
    </div>
    
    <!-- Modal de Configuración -->
    <div class="config-modal" id="configModal">
        <button class="close-btn" onclick="closeConfig()">X</button>
        <h2>Configuración de Datos</h2>
        <p>Sube archivos JSON o Excel para cada búsqueda. Los archivos Excel se convertirán automáticamente a JSON.</p>
        
        <label>Archivo para Búsqueda 1 (Matriz CUPS):</label>
        <input type="file" id="file1" accept=".json,.xlsx,.xls"><br>
        <label>Archivo para Búsqueda 2 (Prestadores):</label>
        <input type="file" id="file2" accept=".json,.xlsx,.xls"><br>
        <label>Archivo para Búsqueda 3 (Cartas Sorweb):</label>
        <input type="file" id="file3" accept=".json,.xlsx,.xls"><br>
        <label>Archivo para Búsqueda 4 (Ayudante):</label>
        <input type="file" id="file4" accept=".json,.xlsx,.xls"><br>
        
        <button onclick="guardarConfig()">Guardar y Cargar Datos</button>
        <!-- Contenedor para la barra de progreso -->
        <div class="progress-container">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        <div class="confirmation" id="confirmMsg"></div>
    </div>

    <!-- Modal personalizado de alerta -->
    <div class="custom-alert" id="customAlert">
        <p id="alertMessage"></p>
        <button onclick="closeAlert()">Aceptar</button>
    </div>

    <!-- Librería SheetJS para leer archivos Excel (XLSX) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <script>
        // Variables para almacenar los datos de cada búsqueda
        let data1 = [];
        let data2 = [];
        let data3 = [];
        let data4 = [];

        // Datos iniciales para Búsqueda 3
        const cartaData = [
            { "titulo": "Cuando el caso Sorweb tiene soportes incompletos", "contenido": "..." },
            { "titulo": "Autorizado Parcialmente CON Complementariedad Nueva eps", "contenido": "..." },
            { "titulo": "USUARIO EN MORA", "contenido": "..." },
            { "titulo": "MEDICO NO ADSCRITO", "contenido": "..." },
            { "titulo": "REMISION VENCIDA", "contenido": "..." }
        ];

        // Variables de debounce para cada buscador
        const debounceTimers = {};
        
        // Estado de sincronización para cada cuadro
        const syncState = {
            '1': false,
            '2': false,
            '3': false,
            '4': false
        };

        /**
         * Normaliza una cadena de texto para la búsqueda (elimina acentos, convierte a minúsculas).
         * @param {string} text - El texto a normalizar.
         * @returns {string} El texto normalizado.
         */
        function normalizeText(text) {
            return text.toString().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        }

        /**
         * Muestra una alerta personalizada.
         * @param {string} message - El mensaje a mostrar.
         */
        function showAlert(message) {
            document.getElementById('alertMessage').innerText = message;
            document.getElementById('customAlert').style.display = 'block';
        }

        /**
         * Cierra la alerta personalizada.
         */
        function closeAlert() {
            document.getElementById('customAlert').style.display = 'none';
        }

        /**
         * Abre el modal de configuración.
         */
        function openConfig() {
            const modal = document.getElementById('configModal');
            modal.style.display = 'block';
        }

        /**
         * Cierra el modal de configuración.
         */
        function closeConfig() {
            const modal = document.getElementById('configModal');
            modal.style.display = 'none';
            document.getElementById('confirmMsg').innerText = '';
            document.getElementById('progressBar').style.width = '0%';
        }
        
        /**
         * Reinicia el tamaño y la posición de todos los cuadros al diseño inicial.
         */
        function resetLayout() {
            const searchBoxes = document.querySelectorAll('.search-box');
            searchBoxes.forEach(box => {
                box.style.width = '';
                box.style.height = '';
                box.style.position = '';
                box.style.top = '';
                box.style.left = '';
                box.style.zIndex = '';
                box.classList.remove('fullscreen');
                box.style.resize = 'both';
            });

            document.getElementById('box1').style.gridArea = '1 / 1 / 2 / 2';
            document.getElementById('box2').style.gridArea = '1 / 2 / 2 / 3';
            document.getElementById('box3').style.gridArea = '2 / 1 / 3 / 2';
            document.getElementById('box4').style.gridArea = '2 / 2 / 3 / 3';
        }

        /**
         * Procesa los archivos subidos (JSON o Excel), carga los datos y los guarda en localStorage.
         * @async
         */
        async function guardarConfig() {
            const files = [
                document.getElementById('file1').files[0],
                document.getElementById('file2').files[0],
                document.getElementById('file3').files[0],
                document.getElementById('file4').files[0]
            ];
            
            const dataToLoad = [null, null, null, null];
            const confirmMsg = document.getElementById('confirmMsg');
            const progressBar = document.getElementById('progressBar');
            
            progressBar.style.width = '0%';
            confirmMsg.innerText = 'Cargando datos...';
            
            let filesLoaded = 0;
            const totalFiles = files.filter(f => f).length;
            
            if (totalFiles === 0) {
                confirmMsg.innerText = 'No se seleccionaron archivos para cargar.';
                return;
            }

            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                if (file) {
                    try {
                        const fileExtension = file.name.split('.').pop().toLowerCase();
                        let jsonData;

                        if (fileExtension === 'json') {
                            jsonData = await new Promise((resolve, reject) => {
                                const reader = new FileReader();
                                reader.onload = (e) => {
                                    try {
                                        resolve(JSON.parse(e.target.result));
                                    } catch (err) {
                                        reject(new Error("Error de formato JSON."));
                                    }
                                };
                                reader.onerror = (e) => reject(new Error("Error leyendo archivo JSON."));
                                reader.readAsText(file);
                            });
                        } else if (fileExtension === 'xlsx' || fileExtension === 'xls') {
                            jsonData = await new Promise((resolve, reject) => {
                                const reader = new FileReader();
                                reader.onload = (e) => {
                                    try {
                                        const workbook = XLSX.read(e.target.result, { type: 'binary' });
                                        const sheetName = workbook.SheetNames[0];
                                        const sheet = workbook.Sheets[sheetName];
                                        const data = XLSX.utils.sheet_to_json(sheet);
                                        resolve(data);
                                    } catch (err) {
                                        reject(new Error("Error al convertir Excel a JSON."));
                                    }
                                };
                                reader.onerror = (e) => reject(new Error("Error leyendo archivo Excel."));
                                reader.readAsBinaryString(file);
                            });
                        } else {
                            throw new Error("Formato de archivo no válido. Sube un .json, .xlsx o .xls.");
                        }

                        const processedData = jsonData.map(item => ({
                            ...item,
                            searchableText: normalizeText(JSON.stringify(item))
                        }));

                        dataToLoad[i] = processedData;
                        filesLoaded++;
                        const progress = (filesLoaded / totalFiles) * 100;
                        progressBar.style.width = `${progress}%`;
                        progressBar.innerText = `${Math.round(progress)}%`;

                    } catch (error) {
                        console.error(`Error procesando archivo ${file.name}:`, error);
                        confirmMsg.innerText = `Error: No se pudo cargar el archivo ${file.name}. ${error.message}`;
                        progressBar.style.width = '0%';
                        return;
                    }
                }
            }
            
            data1 = dataToLoad[0] || data1;
            data2 = dataToLoad[1] || data2;
            data3 = dataToLoad[2] || data3;
            data4 = dataToLoad[3] || data4;

            saveDataToStorage();

            confirmMsg.innerText = `Se cargaron ${filesLoaded} de ${totalFiles} archivos y se guardaron automáticamente.`;
        }

        /**
         * Guarda los datos en el almacenamiento local del navegador.
         */
        function saveDataToStorage() {
            try {
                localStorage.setItem('appData1', JSON.stringify(data1));
                localStorage.setItem('appData2', JSON.stringify(data2));
                localStorage.setItem('appData3', JSON.stringify(data3));
                localStorage.setItem('appData4', JSON.stringify(data4));
            } catch (error) {
                console.error("Error al guardar en LocalStorage:", error);
                showAlert("Error al guardar los datos localmente. El navegador podría estar lleno.");
            }
        }

        /**
         * Carga los datos del almacenamiento local al iniciar la aplicación.
         */
        function loadDataFromStorage() {
            try {
                const storedData1 = localStorage.getItem('appData1');
                const storedData2 = localStorage.getItem('appData2');
                const storedData3 = localStorage.getItem('appData3');
                const storedData4 = localStorage.getItem('appData4');

                if (storedData1) data1 = JSON.parse(storedData1);
                if (storedData2) data2 = JSON.parse(storedData2);
                if (storedData3) data3 = JSON.parse(storedData3);
                else data3 = cartaData.map(item => ({...item, searchableText: normalizeText(JSON.stringify(item)) }));
                if (storedData4) data4 = JSON.parse(storedData4);

            } catch (error) {
                console.error("Error al cargar datos de LocalStorage:", error);
                showAlert("Error al cargar los datos guardados. Se iniciará sin datos previos.");
            }
        }

        /**
         * Función de debounce para optimizar el rendimiento de la búsqueda.
         */
        const debounceSearch = debounce(buscar, 300);

        /**
         * Llama a la función de búsqueda con un retardo para evitar la sobrecarga.
         */
        function debounce(func, delay) {
            return function() {
                const context = this;
                const args = arguments;
                const inputId = args[0];
                const query = document.getElementById(inputId).value;
                
                // Si la búsqueda es en los cuadros 1 o 2 y la sincronización está activa, se propaga
                if (['input1', 'input2'].includes(inputId)) {
                    if (syncState['1'] && syncState['2']) {
                        const otherInputId = inputId === 'input1' ? 'input2' : 'input1';
                        document.getElementById(otherInputId).value = query;
                        clearTimeout(debounceTimers[otherInputId]);
                        debounceTimers[otherInputId] = setTimeout(() => buscar(otherInputId, 'results' + otherInputId.slice(-1)), delay);
                    }
                }

                clearTimeout(debounceTimers[inputId]);
                debounceTimers[inputId] = setTimeout(() => func.apply(context, args), delay);
            };
        }
        
        /**
         * Alterna el estado de sincronización para un cuadro.
         * @param {string} boxNumber - El número del cuadro ('1', '2', '3', '4').
         */
        function toggleSync(boxNumber) {
            if (boxNumber !== '1' && boxNumber !== '2') {
                showAlert("La sincronización solo está disponible entre el Cuadro 1 y el Cuadro 2.");
                return;
            }
            syncState[boxNumber] = !syncState[boxNumber];
            const syncIcon = document.getElementById(`sync${boxNumber}`);
            if (syncState[boxNumber]) {
                syncIcon.classList.add('active');
            } else {
                syncIcon.classList.remove('active');
            }
        }

        /**
         * Realiza la búsqueda en los datos y muestra los resultados.
         * @param {string} inputId - ID del campo de entrada.
         * @param {string} resultId - ID del contenedor de resultados.
         */
        function buscar(inputId, resultId) {
            const resultDiv = document.getElementById(resultId);
            const progressBar = document.getElementById(`progress${inputId.slice(-1)}`);
            progressBar.innerText = "Buscando...";
            let data;
            
            try {
                // Seleccionar los datos correctos
                switch (inputId) {
                    case 'input1': data = data1; break;
                    case 'input2': data = data2; break;
                    case 'input3': data = data3; break;
                    case 'input4': data = data4; break;
                    default: return;
                }
                
                if (!data || data.length === 0) {
                    resultDiv.innerHTML = '<table><tr><td>No hay datos cargados.</td></tr></table>';
                    progressBar.innerText = "0%";
                    return;
                }

                // Obtener consulta y estado de coincidencia exacta
                const query = document.getElementById(inputId).value.trim();
                const isExact = document.getElementById(`exact${inputId.slice(-1)}`).checked;
                const normalizedQuery = normalizeText(query);
                
                // Realizar búsqueda
                let filteredData;
                if (isExact) {
                    filteredData = data.filter(item => item.searchableText === normalizedQuery);
                } else {
                    const keywords = normalizedQuery.split(/\s+/).filter(Boolean);
                    if (keywords.length === 0) {
                        filteredData = data;
                    } else {
                        filteredData = data.filter(item => {
                            return keywords.every(keyword => item.searchableText.includes(keyword));
                        });
                    }
                }

                // Ordenar datos si el usuario hace clic en un encabezado
                const sortKey = resultDiv.dataset.sortKey;
                const sortOrder = resultDiv.dataset.sortOrder;

                if (sortKey) {
                    filteredData.sort((a, b) => {
                        const aValue = a[sortKey];
                        const bValue = b[sortKey];

                        if (typeof aValue === 'string' && typeof bValue === 'string') {
                            return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
                        } else {
                            if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;
                            if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;
                            return 0;
                        }
                    });
                }

                // Generar tabla y resaltar
                let resultHtml = '<table>';
                if (filteredData.length > 0) {
                    const firstItem = filteredData[0];
                    const headers = Object.keys(firstItem).filter(key => key !== 'searchableText');
                    resultHtml += '<tr>';
                    headers.forEach(header => {
                        const sortClass = sortKey === header ? (sortOrder === 'asc' ? 'sorted-asc' : 'sorted-desc') : '';
                        resultHtml += `<th onclick="sortTable(this, '${resultId}')" data-header="${header}" class="${sortClass}">${header.charAt(0).toUpperCase() + header.slice(1)}</th>`;
                    });
                    resultHtml += '</tr>';

                    filteredData.forEach(item => {
                        resultHtml += '<tr>';
                        headers.forEach(header => {
                            let cellContent = item[header] || '';
                            let cellClass = '';
                            if (inputId === 'input4' && header.toLowerCase() === 'valor' && typeof cellContent === 'number') {
                                if (cellContent < 50) cellClass = 'highlight-red';
                                else if (cellContent > 50) cellClass = 'highlight-green';
                            }
                            
                            let displayedContent = cellContent;
                            if (query) {
                                // Resaltar texto si no es un número
                                displayedContent = String(cellContent).replace(new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi'), '<span class="search-highlight">$1</span>');
                            }
                            resultHtml += `<td class="${cellClass}">${displayedContent}</td>`;
                        });
                        resultHtml += '</tr>';
                    });
                } else {
                    resultHtml += '<tr><td colspan="100">No se encontraron resultados.</td></tr>';
                }
                resultHtml += '</table>';
                resultDiv.innerHTML = resultHtml;
                progressBar.innerText = `${filteredData.length} resultados`;

            } catch (error) {
                console.error("Error en la función buscar:", error);
                showAlert("Error en la búsqueda. Revisa la consola para más detalles.");
                progressBar.innerText = "Error";
            }
        }
        
        /**
         * Alterna la visibilidad del panel de opciones.
         * @param {string} id - ID del panel de opciones.
         */
        function toggleOptions(id) {
            const panel = document.getElementById(id);
            panel.style.display = panel.style.display === 'flex' || panel.style.display === '' ? 'none' : 'flex';
        }
        
        /**
         * Copia el contenido de los resultados al portapapeles.
         * @param {string} id - ID del contenedor de resultados.
         */
        function copiarResultados(id) {
            const content = document.getElementById(id).innerText;
            const tempTextArea = document.createElement('textarea');
            tempTextArea.value = content;
            document.body.appendChild(tempTextArea);
            tempTextArea.select();
            
            try {
                document.execCommand('copy');
                showAlert("Resultados copiados al portapapeles.");
            } catch (err) {
                console.error('Error al copiar el texto: ', err);
                showAlert("Error: No se pudo copiar el texto. Inténtalo manualmente.");
            } finally {
                document.body.removeChild(tempTextArea);
            }
        }

        /**
         * Exporta el contenido de una tabla a un archivo CSV.
         * @param {string} id - ID del contenedor de resultados.
         * @param {string} filename - Nombre del archivo a exportar.
         */
        function exportToCsv(id, filename) {
            const resultsTable = document.getElementById(id).querySelector('table');
            if (!resultsTable) {
                showAlert("No hay datos para exportar.");
                return;
            }

            const rows = resultsTable.querySelectorAll("tr");
            let csv = [];
            for (let i = 0; i < rows.length; i++) {
                const row = [], cols = rows[i].querySelectorAll("td, th");
                for (let j = 0; j < cols.length; j++) {
                    // Limpiar el contenido de las etiquetas HTML de resaltado
                    let text = cols[j].innerText.replace(/"/g, '""');
                    row.push('"' + text + '"');
                }
                csv.push(row.join(","));
            }

            // Crear un Blob y un enlace para la descarga
            const csvFile = new Blob([csv.join("\n")], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(csvFile);
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            showAlert("Exportación a CSV completada.");
        }

        /**
         * Activa o desactiva el modo de pantalla completa para un cuadro.
         * @param {string} id - ID del cuadro de búsqueda.
         */
        function pantallaCompleta(id) {
            const box = document.getElementById(id);
            box.classList.toggle("fullscreen");
        }

        /**
         * Alterna el modo compacto, ocultando el input y los resultados.
         * @param {string} id - ID del cuadro de búsqueda.
         */
        function modoCompacto(id) {
            const box = document.getElementById(id);
            const input = box.querySelector("input");
            const results = box.querySelector(".results");
            
            if (input.style.display === "none") {
                input.style.display = "block";
                results.style.display = "block";
            } else {
                input.style.display = "none";
                results.style.display = "none";
            }
        }

        /**
         * Fija el tamaño del cuadro, deshabilitando la capacidad de redimensionar.
         * @param {string} id - ID del cuadro de búsqueda.
         */
        function fijarCuadro(id) {
            const box = document.getElementById(id);
            box.style.resize = box.style.resize === "none" ? "both" : "none";
        }

        /**
         * Reinicia el campo de búsqueda y el área de resultados.
         * @param {string} inputId - ID del campo de entrada.
         * @param {string} resultId - ID del contenedor de resultados.
         */
        function reiniciarCuadro(inputId, resultId) {
            document.getElementById(inputId).value = "";
            document.getElementById(resultId).innerHTML = "";
            document.getElementById(resultId).dataset.sortKey = '';
            document.getElementById(resultId).dataset.sortOrder = '';
        }
        
        /**
         * Ordena la tabla al hacer clic en un encabezado.
         * @param {HTMLElement} header - El encabezado de la tabla que se hizo clic.
         * @param {string} resultId - El ID del contenedor de resultados.
         */
        function sortTable(header, resultId) {
            const resultDiv = document.getElementById(resultId);
            const key = header.dataset.header;
            let order = resultDiv.dataset.sortOrder;

            if (resultDiv.dataset.sortKey === key) {
                order = order === 'asc' ? 'desc' : 'asc';
            } else {
                order = 'asc';
            }
            
            resultDiv.dataset.sortKey = key;
            resultDiv.dataset.sortOrder = order;

            // Vuelve a ejecutar la búsqueda con el nuevo orden
            buscar(resultId.replace('results', 'input'), resultId);
        }

        // Lógica para navegar entre inputs con la tecla Tab
        document.addEventListener("keydown", function(e) {
            if (e.key === "Tab") {
                e.preventDefault();
                const inputs = ["input1", "input2", "input3", "input4"];
                const active = document.activeElement.id;
                let index = inputs.indexOf(active);
                index = (index + 1) % inputs.length;
                document.getElementById(inputs[index]).focus();
            }
        });
    </script>

<script type="module">
  import { initializeApp } from "https://www.gstatic.com/firebasejs/10.5.0/firebase-app.js";
  import { getDatabase, ref, set, get } from "https://www.gstatic.com/firebasejs/10.5.0/firebase-database.js";

  const firebaseConfig = {
    apiKey: "AIzaSyCLgYbPpqXwOY9ha9IdyZ8oLEqA9G_iTVg",
    authDomain: "ayudacoomeva.firebaseapp.com",
    databaseURL: "https://ayudacoomeva-default-rtdb.firebaseio.com",
    projectId: "ayudacoomeva",
    storageBucket: "ayudacoomeva.appspot.com",
    messagingSenderId: "533229200872",
    appId: "1:533229200872:web:c754a6a3670e92b4caf05d"
  };

  const app = initializeApp(firebaseConfig);
  const db = getDatabase(app);

  window.guardarJSON = (nombreArchivo, datos) => {
    const referencia = ref(db, 'archivos/' + nombreArchivo);
    set(referencia, datos)
      .then(() => alert("Archivo guardado correctamente en Firebase"))
      .catch((error) => console.error("Error al guardar:", error));
  };

  window.cargarJSON = (nombreArchivo, callback) => {
    const referencia = ref(db, 'archivos/' + nombreArchivo);
    get(referencia)
      .then((snapshot) => {
        if (snapshot.exists()) {
          const datos = snapshot.val();
          console.log("Datos cargados:", datos);
          if (typeof callback === "function") callback(datos);
        } else {
          alert("No se encontró el archivo en Firebase");
        }
      })
      .catch((error) => console.error("Error al cargar:", error));
  };
</script>

</body>
</html>
